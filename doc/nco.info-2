This is nco.info, produced by makeinfo version 4.13 from nco.texi.

INFO-DIR-SECTION netCDF
START-INFO-DIR-ENTRY
* NCO::        User's Guide for the netCDF Operator suite
END-INFO-DIR-ENTRY

   This file documents NCO, a collection of utilities to manipulate and
analyze netCDF files.

   Copyright (C) 1995-2010 Charlie Zender

   This is the first edition of the `NCO User's Guide',
and is consistent with version 2 of `texinfo.tex'.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. The
license is available online at `http://www.gnu.org/copyleft/fdl.html'

   The original author of this software, Charlie Zender, wants to
improve it with the help of your suggestions, improvements,
bug-reports, and patches.
Charlie Zender <surname at uci dot edu> (yes, my surname is zender)
3200 Croul Hall
Department of Earth System Science
University of California, Irvine
Irvine, CA 92697-3100

File: nco.info,  Node: ncbo netCDF Binary Operator,  Next: ncea netCDF Ensemble Averager,  Prev: ncatted netCDF Attribute Editor,  Up: Operator Reference Manual

4.3 `ncbo' netCDF Binary Operator
=================================

SYNTAX
     ncbo [-3] [-4] [-6] [-A] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h]
     [-L DFL_LVL] [-l PATH] [-O] [-o FILE_3] [-p PATH] [-R] [-r]
     [-t THR_NBR] [-v VAR[,...]] [-X ...] [-x] [-y OP_TYP]
     FILE_1 FILE_2 [FILE_3]

DESCRIPTION

   `ncbo' performs binary operations on variables in FILE_1 and the
corresponding variables (those with the same name) in FILE_2 and stores
the results in FILE_3.  The binary operation operates on the entire
files (modulo any excluded variables).  *Note Missing Values::, for
treatment of missing values.  One of the four standard arithmetic
binary operations currently supported must be selected with the `-y
OP_TYP' switch (or long options `--op_typ' or `--operation').  The
valid binary operations for `ncbo', their definitions, corresponding
values of the OP_TYP key, and alternate invocations are:
"Addition"
     Definition: FILE_3 = FILE_1 + FILE_2
     Alternate invocation: `ncadd'
     OP_TYP key values: `add', `+', `addition'
     Examples: `ncbo --op_typ=add 1.nc 2.nc 3.nc', `ncadd 1.nc 2.nc
     3.nc'
"Subtraction"
     Definition: FILE_3 = FILE_1 - FILE_2
     Alternate invocations: `ncdiff', `ncsub', `ncsubtract'
     OP_TYP key values: `sbt', `-', `dff', `diff', `sub', `subtract',
     `subtraction'
     Examples: `ncbo --op_typ=- 1.nc 2.nc 3.nc', `ncdiff 1.nc 2.nc 3.nc'
"Multiplication"
     Definition: FILE_3 = FILE_1 * FILE_2
     Alternate invocations: `ncmult', `ncmultiply'
     OP_TYP key values: `mlt', `*', `mult', `multiply', `multiplication'
     Examples: `ncbo --op_typ=mlt 1.nc 2.nc 3.nc', `ncmult 1.nc 2.nc
     3.nc'
"Division"
     Definition: FILE_3 = FILE_1 / FILE_2
     Alternate invocation: `ncdivide'
     OP_TYP key values: `dvd', `/', `divide', `division'
     Examples: `ncbo --op_typ=/ 1.nc 2.nc 3.nc', `ncdivide 1.nc 2.nc
     3.nc'
   Care should be taken when using the shortest form of key values,
i.e., `+', `-', `*', and `/'.  Some of these single characters may have
special meanings to the shell (1).  Place these characters inside
quotes to keep them from being interpreted (globbed) by the shell (2).  For
example, the following commands are equivalent
     ncbo --op_typ=* 1.nc 2.nc 3.nc # Dangerous (shell may try to glob)
     ncbo --op_typ='*' 1.nc 2.nc 3.nc # Safe ('*' protected from shell)
     ncbo --op_typ="*" 1.nc 2.nc 3.nc # Safe ('*' protected from shell)
     ncbo --op_typ=mlt 1.nc 2.nc 3.nc
     ncbo --op_typ=mult 1.nc 2.nc 3.nc
     ncbo --op_typ=multiply 1.nc 2.nc 3.nc
     ncbo --op_typ=multiplication 1.nc 2.nc 3.nc
     ncmult 1.nc 2.nc 3.nc # First do 'ln -s ncbo ncmult'
     ncmultiply 1.nc 2.nc 3.nc # First do 'ln -s ncbo ncmultiply'
   No particular argument or invocation form is preferred.  Users are
encouraged to use the forms which are most intuitive to them.

   Normally, `ncbo' will fail unless an operation type is specified
with `-y' (equivalent to `--op_typ').  You may create exceptions to
this rule to suit your particular tastes, in conformance with your
site's policy on "symbolic links" to executables (files of a different
name point to the actual executable).  For many years, `ncdiff' was the
main binary file operator.  As a result, many users prefer to continue
invoking `ncdiff' rather than memorizing a new command (`ncbo -y SBT')
which behaves identically to the original `ncdiff' command.  However,
from a software maintenance standpoint, maintaining a distinct
executable for each binary operation (e.g., `ncadd') is untenable, and
a single executable, `ncbo', is desirable.  To maintain backward
compatibility, therefore, NCO automatically creates a symbolic link
from `ncbo' to `ncdiff'.  Thus `ncdiff' is called an "alternate
invocation" of `ncbo'.  `ncbo' supports many additional alternate
invocations which must be manually activated.  Should users or system
adminitrators decide to activate them, the procedure is simple.  For
example, to use `ncadd' instead of `ncbo --op_typ=add', simply create a
symbolic link from `ncbo' to `ncadd' (3).  The alternatate invocations
supported for each operation type are listed above.  Alternatively,
users may always define `ncadd' as an "alias" to `ncbo --op_typ=add'
(4).

   It is important to maintain portability in NCO scripts.  Therefore
we recommend that site-specfic invocations (e.g., `ncadd') be used only
in interactive sessions from the command-line.  For scripts, we
recommend using the full invocation (e.g., `ncbo --op_typ=add').  This
ensures portability of scripts between users and sites.

   `ncbo' operates (e.g., adds) variables in FILE_2 with the
corresponding variables (those with the same name) in FILE_1 and stores
the results in FILE_3.  Variables in FILE_2 are "broadcast" to conform
to the corresponding variable in FILE_1 if necessary, but the reverse is
not true.  Broadcasting a variable means creating data in non-existing
dimensions from the data in existing dimensions.  For example, a two
dimensional variable in FILE_2 can be subtracted from a four, three, or
two (but not one or zero) dimensional variable (of the same name) in
`file_1'.  This functionality allows the user to compute anomalies from
the mean.  Note that variables in FILE_1 are _not_ broadcast to conform
to the dimensions in FILE_2.  In the future, we will broadcast
variables in FILE_1, if necessary to conform to their counterparts in
FILE_2.  Thus, presently, the number of dimensions, or "rank", of any
processed variable in FILE_1 must be greater than or equal to the rank
of the same variable in FILE_2.  Furthermore, the size of all
dimensions common to both FILE_1 and FILE_2 must be equal.

   When computing anomalies from the mean it is often the case that
FILE_2 was created by applying an averaging operator to a file with
initially the same dimensions as FILE_1 (often FILE_1 itself).  In
these cases, creating FILE_2 with `ncra' rather than `ncwa' will cause
the `ncbo' operation to fail.  For concreteness say the record
dimension in `file_1' is `time'.  If FILE_2 were created by averaging
FILE_1 over the `time' dimension with the `ncra' operator rather than
with the `ncwa' operator, then FILE_2 will have a `time' dimension of
size 1 rather than having no `time' dimension at all (5).  In this case
the input files to `ncbo', FILE_1 and FILE_2, will have unequally sized
`time' dimensions which causes `ncbo' to fail.  To prevent this from
occuring, use `ncwa' to remove the `time' dimension from FILE_2.  See
the example below.

   `ncbo' never operates on coordinate variables or variables of type
`NC_CHAR' or `NC_BYTE'.  This ensures that coordinates like (e.g.,
latitude and longitude) are physically meaningful in the output file,
FILE_3.  This behavior is hardcoded.  `ncbo' applies special rules to
some CF-defined (and/or NCAR CCSM or NCAR CCM fields) such as `ORO'.
See *note CF Conventions:: for a complete description.  Finally, we
note that `ncflint' (*note ncflint netCDF File Interpolator::) is
designed for file interpolation.  As such, it also performs file
subtraction, addition, multiplication, albeit in a more convoluted way
than `ncbo'.

EXAMPLES

   Say files `85_0112.nc' and `86_0112.nc' each contain 12 months of
data.  Compute the change in the monthly averages from 1985 to 1986:
     ncbo -op_typ=sub 86_0112.nc 85_0112.nc 86m85_0112.nc
     ncdiff 86_0112.nc 85_0112.nc 86m85_0112.nc

   The following examples demonstrate the broadcasting feature of
`ncbo'.  Say we wish to compute the monthly anomalies of `T' from the
yearly average of `T' for the year 1985.  First we create the 1985
average from the monthly data, which is stored with the record
dimension `time'.
     ncra 85_0112.nc 85.nc
     ncwa -O -a time 85.nc 85.nc
   The second command, `ncwa', gets rid of the `time' dimension of
size 1 that `ncra' left in `85.nc'.  Now none of the variables in
`85.nc' has a `time' dimension.  A quicker way to accomplish this is to
use `ncwa' from the beginning:
     ncwa -a time 85_0112.nc 85.nc
   We are now ready to use `ncbo' to compute the anomalies for 1985:
     ncdiff -v T 85_0112.nc 85.nc t_anm_85_0112.nc
   Each of the 12 records in `t_anm_85_0112.nc' now contains the
monthly deviation of `T' from the annual mean of `T' for each gridpoint.

   Say we wish to compute the monthly gridpoint anomalies from the zonal
annual mean.  A "zonal mean" is a quantity that has been averaged over
the longitudinal (or X) direction.  First we use `ncwa' to average over
longitudinal direction `lon', creating `85_x.nc', the zonal mean of
`85.nc'.  Then we use `ncbo' to subtract the zonal annual means from the
monthly gridpoint data:
     ncwa -a lon 85.nc 85_x.nc
     ncdiff 85_0112.nc 85_x.nc tx_anm_85_0112.nc
   This examples works assuming `85_0112.nc' has dimensions `time' and
`lon', and that `85_x.nc' has no `time' or `lon' dimension.

   As a final example, say we have five years of monthly data (i.e.,
60 months) stored in `8501_8912.nc' and we wish to create a file which
contains the twelve month seasonal cycle of the average monthly anomaly
from the five-year mean of this data.  The following method is just one
permutation of many which will accomplish the same result.  First use
`ncwa' to create the five-year mean:
     ncwa -a time 8501_8912.nc 8589.nc
   Next use `ncbo' to create a file containing the difference of each
month's data from the five-year mean:
     ncbo 8501_8912.nc 8589.nc t_anm_8501_8912.nc
   Now use `ncks' to group the five January anomalies together in one
file, and use `ncra' to create the average anomaly for all five
Januarys.  These commands are embedded in a shell loop so they are
repeated for all twelve months: 
     for idx in {1..12}; do # Bash Shell (version 3.0+)
       idx=`printf "%02d" ${idx}` # Zero-pad to preserve order
       ncks -F -d time,${idx},,12 t_anm_8501_8912.nc foo.${idx}
       ncra foo.${idx} t_anm_8589_${idx}.nc
     done
     for idx in 01 02 03 04 05 06 07 08 09 10 11 12; do # Bourne Shell
       ncks -F -d time,${idx},,12 t_anm_8501_8912.nc foo.${idx}
       ncra foo.${idx} t_anm_8589_${idx}.nc
     done
     foreach idx (01 02 03 04 05 06 07 08 09 10 11 12) # C Shell
       ncks -F -d time,${idx},,12 t_anm_8501_8912.nc foo.${idx}
       ncra foo.${idx} t_anm_8589_${idx}.nc
     end
   Note that `ncra' understands the `stride' argument so the two
commands inside the loop may be combined into the single command
     ncra -F -d time,${idx},,12 t_anm_8501_8912.nc foo.${idx}
   Finally, use `ncrcat' to concatenate the 12 average monthly anomaly
files into one twelve-record file which contains the entire seasonal
cycle of the monthly anomalies:
     ncrcat t_anm_8589_??.nc t_anm_8589_0112.nc

   ---------- Footnotes ----------

   (1) A naked (i.e., unprotected or unquoted) `*' is a wildcard
character.  A naked `-' may confuse the command line parser.  A naked
`+' and `/' are relatively harmless.

   (2) The widely used shell Bash correctly interprets all these
special characters even when they are not quoted.  That is, Bash does
not prevent NCO from correctly interpreting the intended arithmetic
operation when the following arguments are given (without quotes) to
`ncbo': `--op_typ=+', `--op_typ=-', `--op_typ=*', and `--op_typ=/'

   (3) The command to do this is `ln -s -f ncbo ncadd'

   (4) The command to do this is `alias ncadd='ncbo --op_typ=add''

   (5) This is because `ncra' collapses the record dimension to a size
of 1 (making it a "degenerate" dimension), but does not remove it,
while, unless `-b' is given, `ncwa' removes all averaged dimensions.
In other words, by default `ncra' changes variable size but not rank,
while, `ncwa' changes both variable size and rank.


File: nco.info,  Node: ncea netCDF Ensemble Averager,  Next: ncecat netCDF Ensemble Concatenator,  Prev: ncbo netCDF Binary Operator,  Up: Operator Reference Manual

4.4 `ncea' netCDF Ensemble Averager
===================================

SYNTAX
     ncea [-3] [-4] [-6] [-A] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-L DFL_LVL] [-l PATH]
     [-n LOOP] [-O] [-o OUTPUT-FILE] [-p PATH] [-R] [-r]
     [-t THR_NBR] [-v VAR[,...]] [-X ...] [-x] [-y OP_TYP]
     [INPUT-FILES] [OUTPUT-FILE]

DESCRIPTION

   `ncea' performs gridpoint averages of variables across an arbitrary
number (an "ensemble") of INPUT-FILES, with each file receiving an
equal weight in the average.  `ncea' averages entire files, and weights
each file evenly.  This is distinct from `ncra', which only averages
over the record dimension (e.g., TIME), and weights each record in the
record dimension evenly,

   Variables in the OUTPUT-FILE are the same size as the variable in
each of the INPUT-FILES, and all INPUT-FILES must be the same size.  The
only exception is that `ncea' allows files to differ in the record
dimension size if the requested record hyperslab (*note Hyperslabs::)
resolves to the same size for all files.  `ncea' recomputes the record
dimension hyperslab limits for each input file so that coordinate
limits may be used to select equal length timeseries from unequal
length files.  This simplifies analysis of unequal length timeseries
from simulation ensembles (e.g., the CMIP IPCC AR4 archive).

   `ncea' _always averages_ coordinate variables regardless of the
arithmetic operation type performed on the non-coordinate variables.
(*note Operation Types::).  All dimensions, including the record
dimension, are treated identically and preserved in the OUTPUT-FILE.

   *Note Averaging vs. Concatenating::, for a description of the
distinctions between the various averagers and concatenators.  As a
multi-file operator, `ncea' will read the list of INPUT-FILES from
`stdin' if they are not specified as positional arguments on the
command line (*note Large Numbers of Files::).

   The file is the logical unit of organization for the results of many
scientific studies.  Often one wishes to generate a file which is the
gridpoint average of many separate files.  This may be to reduce
statistical noise by combining the results of a large number of
experiments, or it may simply be a step in a procedure whose goal is to
compute anomalies from a mean state.  In any case, when one desires to
generate a file whose properties are the mean of all the input files,
then `ncea' is the operator to use.

   `ncea' only allows coordinate variables to be processed by the
linear average, minimum, and maximum operations.  `ncea' will return
the linear average of coordinates unless extrema are explicitly
requested.  Other requested operations (e.g., square-root, RMS) are
applied only to non-coordinate variables.  In these cases the linear
average of the coordinate variable will be returned.

EXAMPLES

   Consider a model experiment which generated five realizations of one
year of data, say 1985.  You can imagine that the experimenter slightly
perturbs the initial conditions of the problem before generating each
new solution.  Assume each file contains all twelve months (a seasonal
cycle) of data and we want to produce a single file containing the
ensemble average (mean) seasonal cycle.  Here the numeric filename
suffix denotes the experiment number (_not_ the month):
     ncea 85_01.nc 85_02.nc 85_03.nc 85_04.nc 85_05.nc 85.nc
     ncea 85_0[1-5].nc 85.nc
     ncea -n 5,2,1 85_01.nc 85.nc
   These three commands produce identical answers.  *Note Specifying
Input Files::, for an explanation of the distinctions between these
methods.  The output file, `85.nc', is the same size as the inputs
files.  It contains 12 months of data (which might or might not be
stored in the record dimension, depending on the input files), but each
value in the output file is the average of the five values in the input
files.

   In the previous example, the user could have obtained the ensemble
average values in a particular spatio-temporal region by adding a
hyperslab argument to the command, e.g.,
     ncea -d time,0,2 -d lat,-23.5,23.5 85_??.nc 85.nc
   In this case the output file would contain only three slices of data
in the TIME dimension.  These three slices are the average of the first
three slices from the input files.  Additionally, only data inside the
tropics is included.


File: nco.info,  Node: ncecat netCDF Ensemble Concatenator,  Next: ncflint netCDF File Interpolator,  Prev: ncea netCDF Ensemble Averager,  Up: Operator Reference Manual

4.5 `ncecat' netCDF Ensemble Concatenator
=========================================

SYNTAX
     ncecat [-3] [-4] [-6] [-A] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-L DFL_LVL] [-l PATH]
     [-M] [-n LOOP] [-O] [-o OUTPUT-FILE] [-p PATH] [-R] [-r]
     [-t THR_NBR] [-u ULM_NM] [-v VAR[,...]] [-X ...] [-x]
     [INPUT-FILES] [OUTPUT-FILE]

DESCRIPTION

   `ncecat' concatenates an arbitrary number of input files into a
single output file.  The INPUT-FILES are stored consecutively as
records in OUTPUT-FILE.  Each variable in each input file becomes one
record in the same variable in the output file.  All INPUT-FILES must
contain all extracted variables (or else there would be "gaps" in the
output file).

   A new record dimension is the glue which binds the input file data
together.  The new record dimension name is, by default, "record".  Its
name can be specified with the `-u ULM_NM' short option (or the
`--ulm_nm' or `rcd_nm' long options).

   Each extracted variable must be constant in size and rank across all
INPUT-FILES.  The only exception is that `ncecat' allows files to
differ in the record dimension size if the requested record hyperslab
(*note Hyperslabs::) resolves to the same size for all files.  This
allows easier gluing/averaging of unequal length timeseries from
simulation ensembles (e.g., the IPCC AR4 archive).

   Thus, the OUTPUT-FILE size is the sum of the sizes of the extracted
variables in the input files.  *Note Averaging vs. Concatenating::, for
a description of the distinctions between the various averagers and
concatenators.  As a multi-file operator, `ncecat' will read the list of
INPUT-FILES from `stdin' if they are not specified as positional
arguments on the command line (*note Large Numbers of Files::).

   Turn off global metadata copying.  By default all NCO operators copy
the global metadata of the first input file into OUTPUT-FILE.  This
helps preserve the provenance of the output data.  However, the use of
metadata is burgeoning and is not uncommon to encounter files with
excessive amounts of extraneous metadata.  Extracting small bits of
data from such files leads to output files which are much larger than
necessary due to the automatically copied metadata.  `ncecat' supports
turning off the default copying of global metadata via the `-M' switch
(or its long option equivalents, `--glb_mtd_spr' and
`--global_metadata_suppress').

   Consider five realizations, `85a.nc', `85b.nc', ... `85e.nc' of 1985
predictions from the same climate model.  Then `ncecat 85?.nc
85_ens.nc' glues the individual realizations together into the single
file, `85_ens.nc'.  If an input variable was dimensioned [`lat',`lon'],
it will by default have dimensions [`record',`lat',`lon'] in the output
file.  A restriction of `ncecat' is that the hyperslabs of the
processed variables must be the same from file to file.  Normally this
means all the input files are the same size, and contain data on
different realizations of the same variables.

   Concatenating a variable packed with different scales multiple
datasets is beyond the capabilities of `ncecat' (and `ncrcat', the
other concatenator (*note Concatenation::).  `ncecat' does not unpack
data, it simply _copies_ the data from the INPUT-FILES, and the
metadata from the _first_ INPUT-FILE, to the OUTPUT-FILE.  This means
that data compressed with a packing convention must use the identical
packing parameters (e.g., `scale_factor' and `add_offset') for a given
variable across _all_ input files.  Otherwise the concatenated dataset
will not unpack correctly.  The workaround for cases where the packing
parameters differ across INPUT-FILES requires three steps: First,
unpack the data using `ncpdq'.  Second, concatenate the unpacked data
using `ncecat', Third, re-pack the result with `ncpdq'.

EXAMPLES

   Consider a model experiment which generated five realizations of one
year of data, say 1985.  You can imagine that the experimenter slightly
perturbs the initial conditions of the problem before generating each
new solution.  Assume each file contains all twelve months (a seasonal
cycle) of data and we want to produce a single file containing all the
seasonal cycles.  Here the numeric filename suffix denotes the
experiment number (_not_ the month):
     ncecat 85_01.nc 85_02.nc 85_03.nc 85_04.nc 85_05.nc 85.nc
     ncecat 85_0[1-5].nc 85.nc
     ncecat -n 5,2,1 85_01.nc 85.nc
   These three commands produce identical answers.  *Note Specifying
Input Files::, for an explanation of the distinctions between these
methods.  The output file, `85.nc', is five times the size as a single
INPUT-FILE.  It contains 60 months of data.

   One often prefers that the (new) record dimension have a more
descriptive, context-based name than simply "record".  This is easily
accomplished with the `-u ULM_NM' switch:
     ncecat -u realization 85_0[1-5].nc 85.nc
   Users are more likely to understand the data processing history when
such descriptive coordinates are used.

   Consider a file with an existing record dimension named `time'.  and
suppose the user wishes to convert `time' from a record dimension to a
non-record dimension.  This may be useful, for example, when the user
has another use for the record variable.  The procedure is to use
`ncecat' followed by `ncwa': 
     ncecat in.nc out.nc # Convert time to non-record dimension
     ncwa -a record in.nc out.nc # Remove new degenerate record dimension
   The second step removes the degenerate record dimension.  See *note
ncpdq netCDF Permute Dimensions Quickly:: for other methods of changing
variable dimensionality, including the record dimension.


File: nco.info,  Node: ncflint netCDF File Interpolator,  Next: ncks netCDF Kitchen Sink,  Prev: ncecat netCDF Ensemble Concatenator,  Up: Operator Reference Manual

4.6 `ncflint' netCDF File Interpolator
======================================

SYNTAX
     ncflint [-3] [-4] [-6] [-A] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-i VAR,VAL3]
     [-L DFL_LVL] [-l PATH] [-O] [-o FILE_3] [-p PATH] [-R] [-r]
     [-t THR_NBR] [-v VAR[,...]] [-w WGT1[,WGT2]] [-X ...] [-x]
     FILE_1 FILE_2 [FILE_3]

DESCRIPTION

   `ncflint' creates an output file that is a linear combination of the
input files.  This linear combination is a weighted average, a
normalized weighted average, or an interpolation of the input files.
Coordinate variables are not acted upon in any case, they are simply
copied from FILE_1.

   There are two conceptually distinct methods of using `ncflint'.  The
first method is to specify the weight each input file contributes to
the output file.  In this method, the value VAL3 of a variable in the
output file FILE_3 is determined from its values VAL1 and VAL2 in the
two input files according to

   VAL3 = WGT1*VAL1 + WGT2*VAL2

   .  Here at least WGT1, and, optionally, WGT2, are specified on the
command line with the `-w' (or `--weight' or `--wgt_var') switch.  If
only WGT1 is specified then WGT2 is automatically computed as WGT2 = 1
- WGT1.  Note that weights larger than 1 are allowed.  Thus it is
possible to specify WGT1 = 2 and WGT2 = -3.  One can use this
functionality to multiply all the values in a given file by a constant.

   The second method of using `ncflint' is to specify the interpolation
option with `-i' (or with the `--ntp' or `--interpolate' long options).
This is really the inverse of the first method in the following sense.
When the user specifies the weights directly, `ncflint' has no work to
do besides multiplying the input values by their respective weights and
adding the results together to produce the output values.  It makes
sense to use this when the weights are known _a priori_.

   Another class of problems has the "arrival value" (i.e., VAL3) of a
particular variable VAR known _a priori_.  In this case, the implied
weights can always be inferred by examining the values of VAR in the
input files.  This results in one equation in two unknowns, WGT1 and
WGT2:

   VAL3 = WGT1*VAL1 + WGT2*VAL2

   .  Unique determination of the weights requires imposing the
additional constraint of normalization on the weights: WGT1 + WGT2 = 1.
Thus, to use the interpolation option, the user specifies VAR and VAL3
with the `-i' option.  `ncflint' then computes WGT1 and WGT2, and uses
these weights on all variables to generate the output file.  Although
VAR may have any number of dimensions in the input files, it must
represent a single, scalar value.  Thus any dimensions associated with
VAR must be "degenerate", i.e., of size one.

   If neither `-i' nor `-w' is specified on the command line, `ncflint'
defaults to weighting each input file equally in the output file.  This
is equivalent to specifying `-w 0.5' or `-w 0.5,0.5'.  Attempting to
specify both `-i' and `-w' methods in the same command is an error.

   `ncflint' does not interpolate variables of type `NC_CHAR' and
`NC_BYTE'.  This behavior is hardcoded.

   Depending on your intuition, `ncflint' may treat missing values
unexpectedly.  Consider a point where the value in one input file, say
VAL1, equals the missing value MSS_VAL_1 and, at the same point, the
corresponding value in the other input file VAL2 is not misssing (i.e.,
does not equal MSS_VAL_2).  There are three plausible answers, and this
creates ambiguity.

   Option one is to set VAL3 = MSS_VAL_1.  The rationale is that
`ncflint' is, at heart, an interpolator and interpolation involving a
missing value is intrinsically undefined.  `ncflint' currently
implements this behavior since it is the most conservative and least
likely to lead to misinterpretation.

   Option two is to output the weighted valid data point, i.e.,

   VAL3 = WGT2*VAL2

   .  The rationale for this behavior is that interpolation is really a
weighted average of known points, so `ncflint' should weight the valid
point.

   Option three is to return the _unweighted_ valid point, i.e., VAL3 =
VAL2.  This behavior would appeal to those who use `ncflint' to
estimate data using the closest available data.  When a point is not
bracketed by valid data on both sides, it is better to return the known
datum than no datum at all.

   The current implementation uses the first approach, Option one.  If
you have strong opinions on this matter, let us know, since we are
willing to implement the other approaches as options if there is enough
interest.

EXAMPLES

   Although it has other uses, the interpolation feature was designed
to interpolate FILE_3 to a time between existing files.  Consider input
files `85.nc' and `87.nc' containing variables describing the state of
a physical system at times `time' = 85 and `time' = 87.  Assume each
file contains its timestamp in the scalar variable `time'.  Then, to
linearly interpolate to a file `86.nc' which describes the state of the
system at time at `time' = 86, we would use
     ncflint -i time,86 85.nc 87.nc 86.nc

   Say you have observational data covering January and April 1985 in
two files named `85_01.nc' and `85_04.nc', respectively.  Then you can
estimate the values for February and March by interpolating the
existing data as follows.  Combine `85_01.nc' and `85_04.nc' in a 2:1
ratio to make `85_02.nc':
     ncflint -w 0.667 85_01.nc 85_04.nc 85_02.nc
     ncflint -w 0.667,0.333 85_01.nc 85_04.nc 85_02.nc

   Multiply `85.nc' by 3 and by -2 and add them together to make
`tst.nc':
     ncflint -w 3,-2 85.nc 85.nc tst.nc
   This is an example of a null operation, so `tst.nc' should be
identical (within machine precision) to `85.nc'.

   Add `85.nc' to `86.nc' to obtain `85p86.nc', then subtract `86.nc'
from `85.nc' to obtain `85m86.nc'
     ncflint -w 1,1 85.nc 86.nc 85p86.nc
     ncflint -w 1,-1 85.nc 86.nc 85m86.nc
     ncdiff 85.nc 86.nc 85m86.nc
   Thus `ncflint' can be used to mimic some `ncbo' operations.  However
this is not a good idea in practice because `ncflint' does not
broadcast (*note ncbo netCDF Binary Operator::) conforming variables
during arithmetic.  Thus the final two commands would produce identical
results except that `ncflint' would fail if any variables needed to be
broadcast.

   Rescale the dimensional units of the surface pressure `prs_sfc' from
Pascals to hectopascals (millibars)
     ncflint -C -v prs_sfc -w 0.01,0.0 in.nc in.nc out.nc
     ncatted -a units,prs_sfc,o,c,millibar out.nc


File: nco.info,  Node: ncks netCDF Kitchen Sink,  Next: ncpdq netCDF Permute Dimensions Quickly,  Prev: ncflint netCDF File Interpolator,  Up: Operator Reference Manual

4.7 `ncks' netCDF Kitchen Sink
==============================

SYNTAX
     ncks [-3] [-4] [-6] [-A] [-a] [-B] [-b BINARY-FILE] [-C] [-c]
     [--cnk_dmn nm,sz] [--cnk_map map] [--cnk_plc plc] [--cnk_scl sz]
     [-D DBG] [-d DIM,[MIN][,[MAX][,[STRIDE]]] [--fix_rec_dmn]
     [-F] [-H] [-h] [--hdr_pad NBR] [-L DFL_LVL] [-l PATH] [-M] [-m] [--mk_rec_dmn DIM]
     [-O] [-o OUTPUT-FILE] [-P] [-p PATH] [-Q] [-q] [-R] [-r]
     [-s FORMAT] [-u] [-v VAR[,...]] [-X ...] [-x]
     INPUT-FILE [[OUTPUT-FILE]]

DESCRIPTION

   `ncks' combines selected features of `ncdump', `ncextr', and the
nccut and ncpaste specifications into one versatile utility.  `ncks'
extracts a subset of the data from INPUT-FILE and prints it as ASCII
text to `stdout', writes it in flat binary format to `binary-file', and
writes (or pastes) it in netCDF format to OUTPUT-FILE.

   `ncks' will print netCDF data in ASCII format to `stdout', like
`ncdump', but with these differences: `ncks' prints data in a tabular
format intended to be easy to search for the data you want, one datum
per screen line, with all dimension subscripts and coordinate values
(if any) preceding the datum.  Option `-s' (or long options `--sng_fmt'
and `--string') lets the user format the data using C-style format
strings.

   Options `-a', `-F' , `-H', `-M', `-m', `-P', `-Q', `-q', `-s', and
`-u' (and their long option counterparts) control the formatted
appearance of the data.

   `ncks' extracts (and optionally creates a new netCDF file comprised
of) only selected variables from the input file (similar to the old
`ncextr' specification).  Only variables and coordinates may be
specifically included or excluded--all global attributes and any
attribute associated with an extracted variable are copied to the
screen and/or output netCDF file.  Options `-c', `-C', `-v', and `-x'
(and their long option synonyms) control which variables are extracted.

   `ncks' extracts hyperslabs from the specified variables (`ncks'
implements the original `nccut' specification).  Option `-d' controls
the hyperslab specification.  Input dimensions that are not associated
with any output variable do not appear in the output netCDF.  This
feature removes superfluous dimensions from netCDF files.

   `ncks' will append variables and attributes from the INPUT-FILE to
OUTPUT-FILE if OUTPUT-FILE is a pre-existing netCDF file whose relevant
dimensions conform to dimension sizes of INPUT-FILE.  The append
features of `ncks' are intended to provide a rudimentary means of
adding data from one netCDF file to another, conforming, netCDF file.
If naming conflicts exist between the two files, data in OUTPUT-FILE is
usually overwritten by the corresponding data from INPUT-FILE.  Thus,
when appending, the user should backup OUTPUT-FILE in case valuable
data are inadvertantly overwritten.

   If OUTPUT-FILE exists, the user will be queried whether to
"overwrite", "append", or "exit" the `ncks' call completely.  Choosing
"overwrite" destroys the existing OUTPUT-FILE and create an entirely
new one from the output of the `ncks' call.  Append has differing
effects depending on the uniqueness of the variables and attributes
output by `ncks': If a variable or attribute extracted from INPUT-FILE
does not have a name conflict with the members of OUTPUT-FILE then it
will be added to OUTPUT-FILE without overwriting any of the existing
contents of OUTPUT-FILE.  In this case the relevant dimensions must
agree (conform) between the two files; new dimensions are created in
OUTPUT-FILE as required.  When a name conflict occurs, a global
attribute from INPUT-FILE will overwrite the corresponding global
attribute from OUTPUT-FILE.  If the name conflict occurs for a
non-record variable, then the dimensions and type of the variable (and
of its coordinate dimensions, if any) must agree (conform) in both
files.  Then the variable values (and any coordinate dimension values)
from INPUT-FILE will overwrite the corresponding variable values (and
coordinate dimension values, if any) in OUTPUT-FILE (1).

   Since there can only be one record dimension in a file, the record
dimension must have the same name (but not necessarily the same size) in
both files if a record dimension variable is to be appended.  If the
record dimensions are of differing sizes, the record dimension of
OUTPUT-FILE will become the greater of the two record dimension sizes,
the record variable from INPUT-FILE will overwrite any counterpart in
OUTPUT-FILE and fill values will be written to any gaps left in the
rest of the record variables (I think).  In all cases variable
attributes in OUTPUT-FILE are superseded by attributes of the same name
from INPUT-FILE, and left alone if there is no name conflict.

   Some users may wish to avoid interactive `ncks' queries about
whether to overwrite existing data.  For example, batch scripts will
fail if `ncks' does not receive responses to its queries.  Options `-O'
and `-A' are available to force overwriting existing files and
variables, respectively.

Options specific to `ncks'
--------------------------

The following list provides a short summary of the features unique to
`ncks'.  Features common to many operators are described in *note
Common features::.

`-a'
     Do not alphabetize extracted fields.  By default, the specified
     output variables are extracted, printed, and written to disk in
     alphabetical order.  This tends to make long output lists easier
     to search for particular variables.  Specifying `-a' results in
     the variables being extracted, printed, and written to disk in the
     order in which they were saved in the input file.  Thus `-a'
     retains the original ordering of the variables.  Also `--abc' and
     `--alphabetize'.

`-B `file''
     Activate native machine binary output writing to the default binary
     file, `ncks.bnr'.  The `-B' switch is redundant when the
     `-b' `file' option is specified, and native binary output will be
     directed to the binary file `file'.  Also `--bnr' and `--binary'.
     Writing packed variables in binary format is not supported.

`-b `file''
     Activate native machine binary output writing to binary file
     `file'.  Also `--fl_bnr' and `--binary-file'.  Writing packed
     variables in binary format is not supported.

`-d DIM,[MIN][,[MAX][,[STRIDE]]]'
     Add "stride" argument to hyperslabber.  For a complete description
     of the STRIDE argument, *Note Stride::.

`--fix_rec_dmn'
     Change all record dimensions in the input file into fixed
     dimensions in the output file.

`--mk_rec_dmn'
     Change dimension DIM to a record dimension in the output file.

`-H'
     Print data to screen.  Also activated using `--print' or `--prn'.
     By default `ncks' prints all metadata and data to screen if no
     netCDF output file is specified.  Use `-H' to print data to screen
     if a netCDF output is specified, or to restrict printing to data
     (no metadata) when no netCDF output is specified.  Unless
     otherwise specified (with `-s'), each element of the data
     hyperslab prints on a separate line containing the names, indices,
     and, values, if any, of all of the variables dimensions.  The
     dimension and variable indices refer to the location of the
     corresponding data element with respect to the variable as stored
     on disk (i.e., not the hyperslab).
          % ncks -C -v three_dmn_var in.nc
          lat[0]=-90 lev[0]=100 lon[0]=0 three_dmn_var[0]=0
          lat[0]=-90 lev[0]=100 lon[1]=90 three_dmn_var[1]=1
          lat[0]=-90 lev[0]=100 lon[2]=180 three_dmn_var[2]=2
          ...
          lat[1]=90 lev[2]=1000 lon[1]=90 three_dmn_var[21]=21
          lat[1]=90 lev[2]=1000 lon[2]=180 three_dmn_var[22]=22
          lat[1]=90 lev[2]=1000 lon[3]=270 three_dmn_var[23]=23
     Printing the same variable with the `-F' option shows the same
     variable indexed with Fortran conventions
          % ncks -F -C -v three_dmn_var in.nc
          lon(1)=0 lev(1)=100 lat(1)=-90 three_dmn_var(1)=0
          lon(2)=90 lev(1)=100 lat(1)=-90 three_dmn_var(2)=1
          lon(3)=180 lev(1)=100 lat(1)=-90 three_dmn_var(3)=2
          ...
     Printing a hyperslab does not affect the variable or dimension
     indices since these indices are relative to the full variable (as
     stored in the input file), and the input file has not changed.
     However, if the hyperslab is saved to an output file and those
     values are printed, the indices will change:
          % ncks -H -d lat,90.0 -d lev,1000.0 -v three_dmn_var in.nc out.nc
          ...
          lat[1]=90 lev[2]=1000 lon[0]=0 three_dmn_var[20]=20
          lat[1]=90 lev[2]=1000 lon[1]=90 three_dmn_var[21]=21
          lat[1]=90 lev[2]=1000 lon[2]=180 three_dmn_var[22]=22
          lat[1]=90 lev[2]=1000 lon[3]=270 three_dmn_var[23]=23
          % ncks -C -v three_dmn_var out.nc
          lat[0]=90 lev[0]=1000 lon[0]=0 three_dmn_var[0]=20
          lat[0]=90 lev[0]=1000 lon[1]=90 three_dmn_var[1]=21
          lat[0]=90 lev[0]=1000 lon[2]=180 three_dmn_var[2]=22
          lat[0]=90 lev[0]=1000 lon[3]=270 three_dmn_var[3]=23

`-M'
     Print to screen the global metadata describing the file.  This
     includes file summary information and global attributes.  Also
     `--Mtd' and `--Metadata'.  By default `ncks' prints global
     metadata to screen if no netCDF output file and no variable
     extraction list is specified (with `-v').  Use `-M' to print
     global metadata to screen if a netCDF output is specified, or if a
     variable extraction list is specified (with `-v').

     The various combinations of printing switches can be confusing.
     In an attempt to anticipate what most users want to do, `ncks'
     uses context-sensitive defaults for printing.  Our goal is to
     minimize the use of switches required to accomplish the common
     operations.  We assume that users creating a new file or
     overwriting (e.g., with `-O') an existing file usually wish to
     copy all global and variable-specific attributes to the new file.
     In contrast, we assume that users appending (e.g., with `-A' an
     explicit variable list from one file to another usually wish to
     copy only the variable-specific attributes to the output file.
     The switches `-H', `-M', and `-m' switches are implemented as
     toggles which reverse the default behavior.  The most confusing
     aspect of this is that `-M' inhibits copying global metadata in
     overwrite mode and causes copying of global metadata in append
     mode.
          ncks -O              in.nc out.nc # Copy   VAs and GAs
          ncks -O       -v one in.nc out.nc # Copy   VAs and GAs
          ncks -O -M    -v one in.nc out.nc # Copy   VAs not GAs
          ncks -O    -m -v one in.nc out.nc # Copy   GAs not VAs
          ncks -O -M -m -v one in.nc out.nc # Copy   only data (no atts)
          ncks -A              in.nc out.nc # Append VAs and GAs
          ncks -A       -v one in.nc out.nc # Append VAs not GAs
          ncks -A -M    -v one in.nc out.nc # Append VAs and GAs
          ncks -A    -m -v one in.nc out.nc # Append only data (no atts)
          ncks -A -M -m -v one in.nc out.nc # Append GAs not VAs
     where `VAs' and `GAs' denote variable and global attributes,
     respectively.

`-m'
     Print variable metadata to screen (similar to `ncdump -h').  This
     displays all metadata pertaining to each variable, one variable at
     a time.  This includes information on the compression level, if any
     *Note Deflation::.  Also activated using `--mtd' and `--metadata'.
     The `ncks' default behavior is to print variable metadata to
     screen if no netCDF output file is specified.  Use `-m' to print
     variable metadata to screen if a netCDF output is specified.

`-P'
     Print data, metadata, and units to screen.  The `-P' switch is a
     convenience abbreviation for `-C -H -M -m -u'.  Also activated
     using `--print' or `--prn'.  This set of switches is useful for
     exploring file contents.

`-Q'
     Toggle printing of dimension indices and coordinate values when
     printing arrays.  Each variable's name appears flush left in the
     output.  This helps locate specific variables in lists with many
     variables and different dimensions.

`-q'
     Turn off all printing to screen.  This overrides the setting of
     all print-related switches, equivalent to `-H -M -m' when in
     single-file printing mode.  When invoked with `-R' (*note
     Retaining Retrieved Files::), `ncks' automatically sets `-q'.
     This allows `ncks' to retrieve remote files without automatically
     trying to print them.  Also `--quiet'.

`-s FORMAT'
     String format for text output.  Accepts C language escape
     sequences and `printf()' formats.  Also `--string'  and
     `--sng_fmt'.

`-u'
     Toggle the printing of a variable's `units' attribute, if any,
     with its values.  Also `--units'.

EXAMPLES

   View all data in netCDF `in.nc', printed with Fortran indexing
conventions:
     ncks -F in.nc

   Copy the netCDF file `in.nc' to file `out.nc'.
     ncks in.nc out.nc
   Now the file `out.nc' contains all the data from `in.nc'.  There
are, however, two differences between `in.nc' and `out.nc'.  First, the
`history' global attribute (*note History Attribute::) will contain the
command used to create `out.nc'.  Second, the variables in `out.nc'
will be defined in alphabetical order.  Of course the internal storage
of variable in a netCDF file should be transparent to the user, but
there are cases when alphabetizing a file is useful (see description of
`-a' switch).

   Copy all global attributes (and no variables) from `in.nc' to
`out.nc':
     ncks -A -x ~/nco/data/in.nc ~/out.nc
   The `-x' switch tells NCO to use the complement of the extraction
list (*note Subsetting Variables::).  Since no extraction list is
explicitly specified (with `-v'), the default is to extract all
variables.  The complement of all variables is no variables.  Without
any variables to extract, the append (`-A') command (*note Appending
Variables::) has only to extract and copy (i.e., append) global
attributes to the output file.

   Print variable `three_dmn_var' from file `in.nc' with default
notations.  Next print `three_dmn_var' as an un-annotated text column.
Then print `three_dmn_var' signed with very high precision.  Finally,
print `three_dmn_var' as a comma-separated list.
     % ncks -C -v three_dmn_var in.nc
     lat[0]=-90 lev[0]=100 lon[0]=0 three_dmn_var[0]=0
     lat[0]=-90 lev[0]=100 lon[1]=90 three_dmn_var[1]=1
     ...
     lat[1]=90 lev[2]=1000 lon[3]=270 three_dmn_var[23]=23
     % ncks -s '%f\n' -C -v three_dmn_var in.nc
     0.000000
     1.000000
     ...
     23.000000
     % ncks -s '%+16.10f\n' -C -v three_dmn_var in.nc
        +0.0000000000
        +1.0000000000
     ...
       +23.0000000000
     % ncks -s '%f, ' -C -v three_dmn_var in.nc
     0.000000, 1.000000, ..., 23.000000,
   The second and third options are useful when pasting data into text
files like reports or papers.  *Note ncatted netCDF Attribute Editor::,
for more details on string formatting and special characters.

   One dimensional arrays of characters stored as netCDF variables are
automatically printed as strings, whether or not they are
NUL-terminated, e.g.,
     ncks -v fl_nm in.nc
   The `%c' formatting code is useful for printing multidimensional
arrays of characters representing fixed length strings
     ncks -s '%c' -v fl_nm_arr in.nc
   Using the `%s' format code on strings which are not NUL-terminated
(and thus not technically strings) is likely to result in a core dump.

   Create netCDF `out.nc' containing all variables, and any associated
coordinates, except variable `time', from netCDF `in.nc':
     ncks -x -v time in.nc out.nc

   Extract variables `time' and `pressure' from netCDF `in.nc'.  If
`out.nc' does not exist it will be created.  Otherwise the you will be
prompted whether to append to or to overwrite `out.nc':
     ncks -v time,pressure in.nc out.nc
     ncks -C -v time,pressure in.nc out.nc
   The first version of the command creates an `out.nc' which contains
`time', `pressure', and any coordinate variables associated with
PRESSURE.  The `out.nc' from the second version is guaranteed to
contain only two variables `time' and `pressure'.

   Create netCDF `out.nc' containing all variables from file `in.nc'.
Restrict the dimensions of these variables to a hyperslab.  Print (with
`-H') the hyperslabs to the screen for good measure.  The specified
hyperslab is: the fifth value in dimension `time'; the half-open range
LAT > 0. in coordinate `lat'; the half-open range LON < 330. in
coordinate `lon'; the closed interval 0.3 < BAND < 0.5 in coordinate
`band'; and cross-section closest to 1000. in coordinate `lev'.  Note
that limits applied to coordinate values are specified with a decimal
point, and limits applied to dimension indices do not have a decimal
point *Note Hyperslabs::.
     ncks -H -d time,5 -d lat,,0.0 -d lon,330.0, -d band,0.3,0.5
     -d lev,1000.0 in.nc out.nc

   Assume the domain of the monotonically increasing longitude
coordinate `lon' is 0 < LON < 360.  Here, `lon' is an example of a
wrapped coordinate.  `ncks' will extract a hyperslab which crosses the
Greenwich meridian simply by specifying the westernmost longitude as
MIN and the easternmost longitude as MAX, as follows:
     ncks -d lon,260.0,45.0 in.nc out.nc
   For more details *Note Wrapped Coordinates::.

   ---------- Footnotes ----------

   (1) Those familiar with netCDF mechanics might wish to know what is
happening here: `ncks' does not attempt to redefine the variable in
OUTPUT-FILE to match its definition in INPUT-FILE, `ncks' merely copies
the values of the variable and its coordinate dimensions, if any, from
INPUT-FILE to OUTPUT-FILE.


File: nco.info,  Node: ncpdq netCDF Permute Dimensions Quickly,  Next: ncra netCDF Record Averager,  Prev: ncks netCDF Kitchen Sink,  Up: Operator Reference Manual

4.8 `ncpdq' netCDF Permute Dimensions Quickly
=============================================

SYNTAX
     ncpdq [-3] [-4] [-6] [-A] [-a [-]DIM[,...]] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-L DFL_LVL] [-l PATH]
     [-M PCK_MAP] [-O] [-o OUTPUT-FILE] [-P PCK_PLC] [-p PATH]
     [-R] [-r] [-t THR_NBR] [-U] [-v VAR[,...]] [-X ...] [-x]
     INPUT-FILE [OUTPUT-FILE]

DESCRIPTION

   `ncpdq' performs one of two distinct functions, packing or dimension
permutation, but not both, when invoked.  `ncpdq' is optimized to
perform these actions in a parallel fashion with a minimum of time and
memory.  The "pdq" may stand for "Permute Dimensions Quickly", "Pack
Data Quietly", "Pillory Dan Quayle", or other silly uses.

Packing and Unpacking Functions
-------------------------------

The `ncpdq' packing (and unpacking) algorithms are described in *note
Methods and functions::, and are also implemented in `ncap2'.  `ncpdq'
extends the functionality of these algorithms by providing high level
control of the "packing policy" so that users can pack (and unpack)
entire files consistently with one command.  The user specifies the
desired packing policy with the `-P' switch (or its long option
equivalents, `--pck_plc' and `--pack_policy') and its PCK_PLC argument.
Four packing policies are currently implemented:
"Packing (and Re-Packing) Variables [_default_]"
     Definition: Pack unpacked variables, re-pack packed variables
     Alternate invocation: `ncpack'
     PCK_PLC key values: `all_new', `pck_all_new_att'
"Packing (and not Re-Packing) Variables"
     Definition: Pack unpacked variables, copy packed variables
     Alternate invocation: none
     PCK_PLC key values: `all_xst', `pck_all_xst_att'
"Re-Packing Variables"
     Definition: Re-pack packed variables, copy unpacked variables
     Alternate invocation: none
     PCK_PLC key values: `xst_new', `pck_xst_new_att'
"Unpacking"
     Definition: Unpack packed variables, copy unpacked variables
     Alternate invocation: `ncunpack'
     PCK_PLC key values: `upk', `unpack', `pck_upk'
Equivalent key values are fully interchangeable.  Multiple equivalent
options are provided to satisfy disparate needs and tastes of NCO users
working with scripts and from the command line.

   To reduce required memorization of these complex policy switches,
`ncpdq' may also be invoked via a synonym or with switches that imply a
particular policy.  `ncpack' is a synonym for `ncpdq' and behaves the
same in all respects.  Both `ncpdq' and `ncpack' assume a default
packing policy request of `all_new'.  Hence `ncpack' may be invoked
without any `-P' switch, unlike `ncpdq'.  Similarly, `ncunpack' is a
synonym for `ncpdq' except that `ncpack' implicitly assumes a request
to unpack, i.e., `-P pck_upk'.  Finally, the `ncpdq' `-U' switch (or
its long option equivalents, `--upk' and `--unpack') requires no
argument.  It simply requests unpacking.

   Given the menagerie of synonyms, equivalent options, and implied
options, a short list of some equivalent commands is appropriate.  The
following commands are equivalent for packing: `ncpdq -P all_new',
`ncpdq --pck_plc=all_new', and `ncpack'.  The following commands are
equivalent for unpacking: `ncpdq -P upk', `ncpdq -U', `ncpdq
--pck_plc=unpack', and `ncunpack'.  Equivalent commands for other
packing policies, e.g., `all_xst', follow by analogy.  Note that
`ncpdq' synonyms are subject to the same constraints and
recommendations discussed in the secion on `ncbo' synonyms (*note ncbo
netCDF Binary Operator::).  That is, symbolic links must exist from the
synonym to `ncpdq', or else the user must define an `alias'.

   The `ncpdq' packing algorithms must know to which type particular
types of input variables are to be packed.  The correspondence between
the input variable type and the output, packed type, is called the
"packing map".  The user specifies the desired packing map with the
`-M' switch (or its long option equivalents, `--pck_map' and `--map')
and its PCK_MAP argument.  Five packing maps are currently implemented:
"Pack Floating Precisions to `NC_SHORT' [_default_]"
     Definition: Pack floating precision types to `NC_SHORT'
     Map: Pack [`NC_DOUBLE',`NC_FLOAT'] to `NC_SHORT'
     Types copied instead of packed:
     [`NC_INT',`NC_SHORT',`NC_CHAR',`NC_BYTE']
     PCK_MAP key values: `flt_sht', `pck_map_flt_sht'
"Pack Floating Precisions to `NC_BYTE'"
     Definition: Pack floating precision types to `NC_BYTE'
     Map: Pack [`NC_DOUBLE',`NC_FLOAT'] to `NC_BYTE'
     Types copied instead of packed:
     [`NC_INT',`NC_SHORT',`NC_CHAR',`NC_BYTE']
     PCK_MAP key values: `flt_byt', `pck_map_flt_byt'
"Pack Higher Precisions to `NC_SHORT'"
     Definition: Pack higher precision types to `NC_SHORT'
     Map: Pack [`NC_DOUBLE',`NC_FLOAT',`NC_INT'] to `NC_SHORT'
     Types copied instead of packed: [`NC_SHORT',`NC_CHAR',`NC_BYTE']
     PCK_MAP key values: `hgh_sht', `pck_map_hgh_sht'
"Pack Higher Precisions to `NC_BYTE'"
     Definition: Pack higher precision types to `NC_BYTE'
     Map: Pack [`NC_DOUBLE',`NC_FLOAT',`NC_INT',`NC_SHORT'] to `NC_BYTE'
     Types copied instead of packed: [`NC_CHAR',`NC_BYTE']
     PCK_MAP key values: `hgh_byt', `pck_map_hgh_byt'
"Pack to Next Lesser Precision"
     Definition: Pack each type to type of next lesser size
     Map: Pack `NC_DOUBLE' to `NC_INT'.  Pack [`NC_FLOAT',`NC_INT'] to
     `NC_SHORT'.  Pack `NC_SHORT' to `NC_BYTE'.
     Types copied instead of packed: [`NC_CHAR',`NC_BYTE']
     PCK_MAP key values: `nxt_lsr', `pck_map_nxt_lsr'
The default `all_new' packing policy with the default `flt_sht' packing
map reduces the typical `NC_FLOAT'-dominated file size by about 50%.
`flt_byt' packing reduces an `NC_DOUBLE'-dominated file by about 87%.

   The netCDF packing algorithm (*note Methods and functions::) is
lossy--once packed, the exact original data cannot be recovered without
a full backup.  Hence users should be aware of some packing caveats:
First, the interaction of packing and data equal to the _FILLVALUE is
complex.  Test the `_FillValue' behavior by performing a pack/unpack
cycle to ensure data that are missing _stay_ missing and data that are
not misssing do not join the Air National Guard and go missing.  This
may lead you to elect a new _FILLVALUE.  Second, `ncpdq' actually
allows packing into `NC_CHAR' (with, e.g., `flt_chr').  However, the
intrinsic conversion of `signed char' to higher precision types is
tricky so for values equal to zero, i.e., `NUL'.  Hence packing to
`NC_CHAR' is not documented or advertised.  Pack into `NC_BYTE' (with,
e.g., `flt_byt') instead.

Dimension Permutation
---------------------

`ncpdq' re-shapes variables in INPUT-FILE by re-ordering and/or
reversing dimensions specified in the dimension list.  The dimension
list is a whitespace-free, comma separated list of dimension names,
optionally prefixed by negative signs, that follows the `-a' (or long
options `--arrange', `--permute', `--re-order', or `--rdr') switch.  To
re-order variables by a subset of their dimensions, specify these
dimensions in a comma-separated list following `-a', e.g., `-a lon,lat'.
To reverse a dimension, prefix its name with a negative sign in the
dimension list, e.g., `-a -lat'.  Re-ordering and reversal may be
performed simultaneously, e.g., `-a lon,-lat,time,-lev'.

   Users may specify any permutation of dimensions, including
permutations which change the record dimension identity.  The record
dimension is re-ordered like any other dimension.  This unique `ncpdq'
capability makes it possible to concatenate files along any dimension.
See *note Concatenation:: for a detailed example.  The record dimension
is always the most slowly varying dimension in a record variable (*note
C and Fortran Index Conventions::).  The specified re-ordering fails if
it requires creating more than one record dimension amongst all the
output variables (1).

   Two special cases of dimension re-ordering and reversal deserve
special mention.  First, it may be desirable to completely reverse the
storage order of a variable.  To do this, include all the variable's
dimensions in the dimension re-order list in their original order, and
prefix each dimension name with the negative sign.  Second, it may
useful to transpose a variable's storage order, e.g., from C to Fortran
data storage order (*note C and Fortran Index Conventions::).  To do
this, include all the variable's dimensions in the dimension re-order
list in reversed order.  Explicit examples of these two techniques
appear below.

EXAMPLES

   Pack and unpack all variables in file `in.nc' and store the results
in `out.nc':
     ncpdq in.nc out.nc # Same as ncpack in.nc out.nc
     ncpdq -P all_new -M flt_sht in.nc out.nc # Defaults
     ncpdq -P all_xst in.nc out.nc
     ncpdq -P upk in.nc out.nc # Same as ncunpack in.nc out.nc
     ncpdq -U in.nc out.nc # Same as ncunpack in.nc out.nc
   The first two commands pack any unpacked variable in the input file.
They also unpack and then re-pack every packed variable.  The third
command only packs unpacked variables in the input file.  If a variable
is already packed, the third command copies it unchanged to the output
file.  The fourth and fifth commands unpack any packed variables.  If a
variable is not packed, the third command copies it unchanged.

   The previous examples all utilized the default packing map.  Suppose
you wish to archive all data that are currently unpacked into a form
which only preserves 256 distinct values.  Then you could specify the
packing map PCK_MAP as `hgh_byt' and the packing policy PCK_PLC as
`all_xst':
     ncpdq -P all_xst -M hgh_byt in.nc out.nc
   Many different packing maps may be used to construct a given file by
performing the packing on subsets of variables (e.g., with `-v') and
using the append feature with `-A' (*note Appending Variables::).

   Re-order file `in.nc' so that the dimension `lon' always precedes
the dimension `lat' and store the results in `out.nc':
     ncpdq -a lon,lat in.nc out.nc
     ncpdq -v three_dmn_var -a lon,lat in.nc out.nc
   The first command re-orders every variable in the input file.  The
second command extracts and re-orders only the variable `three_dmn_var'.

   Suppose the dimension `lat' represents latitude and monotonically
increases increases from south to north.  Reversing the `lat' dimension
means re-ordering the data so that latitude values decrease
monotonically from north to south.  Accomplish this with
     % ncpdq -a -lat in.nc out.nc
     % ncks -C -v lat in.nc
     lat[0]=-90
     lat[1]=90
     % ncks -C -v lat out.nc
     lat[0]=90
     lat[1]=-90
   This operation reversed the latitude dimension of all variables.
Whitespace immediately preceding the negative sign that specifies
dimension reversal may be dangerous.  Quotes and long options can help
protect negative signs that should indicate dimension reversal from
being interpreted by the shell as dashes that indicate new command line
switches.
     ncpdq -a -lat in.nc out.nc # Dangerous? Whitespace before "-lat"
     ncpdq -a '-lat' in.nc out.nc # OK. Quotes protect "-" in "-lat"
     ncpdq -a lon,-lat in.nc out.nc # OK. No whitespace before "-"
     ncpdq --rdr=-lat in.nc out.nc # Preferred. Uses "=" not whitespace

   To create the mathematical transpose of a variable, place all its
dimensions in the dimension re-order list in reversed order.  This
example creates the transpose of `three_dmn_var':
     % ncpdq -a lon,lev,lat -v three_dmn_var in.nc out.nc
     % ncks -C -v three_dmn_var in.nc
     lat[0]=-90 lev[0]=100 lon[0]=0 three_dmn_var[0]=0
     lat[0]=-90 lev[0]=100 lon[1]=90 three_dmn_var[1]=1
     lat[0]=-90 lev[0]=100 lon[2]=180 three_dmn_var[2]=2
     ...
     lat[1]=90 lev[2]=1000 lon[1]=90 three_dmn_var[21]=21
     lat[1]=90 lev[2]=1000 lon[2]=180 three_dmn_var[22]=22
     lat[1]=90 lev[2]=1000 lon[3]=270 three_dmn_var[23]=23
     % ncks -C -v three_dmn_var out.nc
     lon[0]=0 lev[0]=100 lat[0]=-90 three_dmn_var[0]=0
     lon[0]=0 lev[0]=100 lat[1]=90 three_dmn_var[1]=12
     lon[0]=0 lev[1]=500 lat[0]=-90 three_dmn_var[2]=4
     ...
     lon[3]=270 lev[1]=500 lat[1]=90 three_dmn_var[21]=19
     lon[3]=270 lev[2]=1000 lat[0]=-90 three_dmn_var[22]=11
     lon[3]=270 lev[2]=1000 lat[1]=90 three_dmn_var[23]=23

   To completely reverse the storage order of a variable, include all
its dimensions in the re-order list, each prefixed by a negative sign.
This example reverses the storage order of `three_dmn_var':
     % ncpdq -a -lat,-lev,-lon -v three_dmn_var in.nc out.nc
     % ncks -C -v three_dmn_var in.nc
     lat[0]=-90 lev[0]=100 lon[0]=0 three_dmn_var[0]=0
     lat[0]=-90 lev[0]=100 lon[1]=90 three_dmn_var[1]=1
     lat[0]=-90 lev[0]=100 lon[2]=180 three_dmn_var[2]=2
     ...
     lat[1]=90 lev[2]=1000 lon[1]=90 three_dmn_var[21]=21
     lat[1]=90 lev[2]=1000 lon[2]=180 three_dmn_var[22]=22
     lat[1]=90 lev[2]=1000 lon[3]=270 three_dmn_var[23]=23
     % ncks -C -v three_dmn_var out.nc
     lat[0]=90 lev[0]=1000 lon[0]=270 three_dmn_var[0]=23
     lat[0]=90 lev[0]=1000 lon[1]=180 three_dmn_var[1]=22
     lat[0]=90 lev[0]=1000 lon[2]=90 three_dmn_var[2]=21
     ...
     lat[1]=-90 lev[2]=100 lon[1]=180 three_dmn_var[21]=2
     lat[1]=-90 lev[2]=100 lon[2]=90 three_dmn_var[22]=1
     lat[1]=-90 lev[2]=100 lon[3]=0 three_dmn_var[23]=0

   Consider a file with all dimensions, including `time', fixed
(non-record).  Suppose the user wishes to convert `time' from a fixed
dimension to a record dimension.  This may be useful, for example, when
the user wishes to append additional time slices to the data.  The
procedure is to use `ncecat' followed by `ncpdq' and then `ncwa': 
     ncecat -O in.nc out.nc # Add degenerate record dimension named "record"
     ncpdq -O -a time,record out.nc out.nc # Switch "record" and "time"
     ncwa -O -a record out.nc out.nc # Remove (degenerate) "record"
   The first step creates a degenerate (size equals one) record
dimension named (by default) `record'.  The second step swaps the
ordering of the dimensions named `time' and `record'.  Since `time' now
occupies the position of the first (least rapidly varying) dimension,
it becomes the record dimension.  The dimension named `record' is no
longer a record dimension.  The third step averages over this
degenerate `record' dimension.  Averaging over a degenerate dimension
does not alter the data.  The ordering of other dimensions in the file
(`lat', `lon', etc.) is immaterial to this procedure.  See *note ncecat
netCDF Ensemble Concatenator:: for other methods of changing variable
dimensionality, including the record dimension.

   ---------- Footnotes ----------

   (1) This limitation, imposed by the netCDF storage layer, may be
relaxed in the future with netCDF4.


File: nco.info,  Node: ncra netCDF Record Averager,  Next: ncrcat netCDF Record Concatenator,  Prev: ncpdq netCDF Permute Dimensions Quickly,  Up: Operator Reference Manual

4.9 `ncra' netCDF Record Averager
=================================

SYNTAX
     ncra [-3] [-4] [-6] [-A] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-L DFL_LVL] [-l PATH]
     [-n LOOP] [-O] [-o OUTPUT-FILE] [-p PATH] [-R] [-r]
     [-t THR_NBR] [-v VAR[,...]] [-X ...] [-x] [-y OP_TYP]
     [INPUT-FILES] [OUTPUT-FILE]

DESCRIPTION

   `ncra' averages record variables across an arbitrary number of
INPUT-FILES.  The record dimension is, by default, retained as a
degenerate (size 1) dimension in the output variables.  *Note Averaging
vs. Concatenating::, for a description of the distinctions between the
various averagers and concatenators.  As a multi-file operator, `ncra'
will read the list of INPUT-FILES from `stdin' if they are not specified
as positional arguments on the command line (*note Large Numbers of
Files::).

   Input files may vary in size, but each must have a record dimension.
The record coordinate, if any, should be monotonic (or else non-fatal
warnings may be generated).  Hyperslabs of the record dimension which
include more than one file work correctly.  `ncra' supports the STRIDE
argument to the `-d' hyperslab option (*note Hyperslabs::) for the
record dimension only, STRIDE is not supported for non-record
dimensions.

   `ncra' weights each record (e.g., time slice) in the INPUT-FILES
equally.  `ncra' does not attempt to see if, say, the `time' coordinate
is irregularly spaced and thus would require a weighted average in
order to be a true time average.  `ncra' _always averages_ coordinate
variables regardless of the arithmetic operation type performed on the
non-coordinate variables.  (*note Operation Types::).

EXAMPLES

   Average files `85.nc', `86.nc', ... `89.nc' along the record
dimension, and store the results in `8589.nc': 
     ncra 85.nc 86.nc 87.nc 88.nc 89.nc 8589.nc
     ncra 8[56789].nc 8589.nc
     ncra -n 5,2,1 85.nc 8589.nc
   These three methods produce identical answers.  *Note Specifying
Input Files::, for an explanation of the distinctions between these
methods.

   Assume the files `85.nc', `86.nc', ... `89.nc' each contain a record
coordinate TIME of length 12 defined such that the third record in
`86.nc' contains data from March 1986, etc.  NCO knows how to hyperslab
the record dimension across files.  Thus, to average data from
December, 1985 through February, 1986:
     ncra -d time,11,13 85.nc 86.nc 87.nc 8512_8602.nc
     ncra -F -d time,12,14 85.nc 86.nc 87.nc 8512_8602.nc
   The file `87.nc' is superfluous, but does not cause an error.  The
`-F' turns on the Fortran (1-based) indexing convention.  The following
uses the STRIDE option to average all the March temperature data from
multiple input files into a single output file
     ncra -F -d time,3,,12 -v temperature 85.nc 86.nc 87.nc 858687_03.nc
   *Note Stride::, for a description of the STRIDE argument.

   Assume the TIME coordinate is incrementally numbered such that
January, 1985 = 1 and December, 1989 = 60.  Assuming `??' only expands
to the five desired files, the following averages June, 1985-June, 1989:
     ncra -d time,6.,54. ??.nc 8506_8906.nc


File: nco.info,  Node: ncrcat netCDF Record Concatenator,  Next: ncrename netCDF Renamer,  Prev: ncra netCDF Record Averager,  Up: Operator Reference Manual

4.10 `ncrcat' netCDF Record Concatenator
========================================

SYNTAX
     ncrcat [-3] [-4] [-6] [-A] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-L DFL_LVL] [-l PATH]
     [-n LOOP] [-O] [-o OUTPUT-FILE] [-p PATH] [-R] [-r]
     [-t THR_NBR] [-v VAR[,...]] [-X ...] [-x]
     [INPUT-FILES] [OUTPUT-FILE]

DESCRIPTION

   `ncrcat' concatenates record variables across an arbitrary number of
INPUT-FILES.  The final record dimension is by default the sum of the
lengths of the record dimensions in the input files.  *Note Averaging
vs. Concatenating::, for a description of the distinctions between the
various averagers and concatenators.  As a multi-file operator,
`ncrcat' will read the list of INPUT-FILES from `stdin' if they are not
specified as positional arguments on the command line (*note Large
Numbers of Files::).

   Input files may vary in size, but each must have a record dimension.
The record coordinate, if any, should be monotonic (or else non-fatal
warnings may be generated).  Hyperslabs along the record dimension that
span more than one file are handled correctly.  `ncra' supports the
STRIDE argument to the `-d' hyperslab option for the record dimension
only, STRIDE is not supported for non-record dimensions.

   Concatenating a variable packed with different scales multiple
datasets is beyond the capabilities of `ncrcat' (and `ncecat', the
other concatenator (*note Concatenation::).  `ncrcat' does not unpack
data, it simply _copies_ the data from the INPUT-FILES, and the
metadata from the _first_ INPUT-FILE, to the OUTPUT-FILE.  This means
that data compressed with a packing convention must use the identical
packing parameters (e.g., `scale_factor' and `add_offset') for a given
variable across _all_ input files.  Otherwise the concatenated dataset
will not unpack correctly.  The workaround for cases where the packing
parameters differ across INPUT-FILES requires three steps: First,
unpack the data using `ncpdq'.  Second, concatenate the unpacked data
using `ncrcat', Third, re-pack the result with `ncpdq'.

   `ncrcat' applies special rules to ARM convention time fields (e.g.,
`time_offset').  See *note ARM Conventions:: for a complete description.

EXAMPLES

   Concatenate files `85.nc', `86.nc', ... `89.nc' along the record
dimension, and store the results in `8589.nc': 
     ncrcat 85.nc 86.nc 87.nc 88.nc 89.nc 8589.nc
     ncrcat 8[56789].nc 8589.nc
     ncrcat -n 5,2,1 85.nc 8589.nc
   These three methods produce identical answers.  *Note Specifying
Input Files::, for an explanation of the distinctions between these
methods.

   Assume the files `85.nc', `86.nc', ... `89.nc' each contain a record
coordinate TIME of length 12 defined such that the third record in
`86.nc' contains data from March 1986, etc.  NCO knows how to hyperslab
the record dimension across files.  Thus, to concatenate data from
December, 1985-February, 1986:
     ncrcat -d time,11,13 85.nc 86.nc 87.nc 8512_8602.nc
     ncrcat -F -d time,12,14 85.nc 86.nc 87.nc 8512_8602.nc
   The file `87.nc' is superfluous, but does not cause an error.  When
`ncra' and `ncrcat' encounter a file which does contain any records
that meet the specified hyperslab criteria, they disregard the file and
proceed to the next file without failing.  The `-F' turns on the
Fortran (1-based) indexing convention.  

   The following uses the STRIDE option to concatenate all the March
temperature data from multiple input files into a single output file
     ncrcat -F -d time,3,,12 -v temperature 85.nc 86.nc 87.nc 858687_03.nc
   *Note Stride::, for a description of the STRIDE argument.

   Assume the TIME coordinate is incrementally numbered such that
January, 1985 = 1 and December, 1989 = 60.  Assuming `??' only expands
to the five desired files, the following concatenates June, 1985-June,
1989:
     ncrcat -d time,6.,54. ??.nc 8506_8906.nc


File: nco.info,  Node: ncrename netCDF Renamer,  Next: ncwa netCDF Weighted Averager,  Prev: ncrcat netCDF Record Concatenator,  Up: Operator Reference Manual

4.11 `ncrename' netCDF Renamer
==============================

SYNTAX
     ncrename [-a OLD_NAME,NEW_NAME] [-a ...] [-D DBG]
     [-d OLD_NAME,NEW_NAME] [-d ...] [-h] [--hdr_pad NBR] [-l PATH]
     [-O] [-o OUTPUT-FILE] [-p PATH] [-R] [-r]
     [-v OLD_NAME,NEW_NAME] [-v ...]
     INPUT-FILE [[OUTPUT-FILE]]

DESCRIPTION

   `ncrename' renames dimensions, variables, and attributes in a netCDF
file.  Each object that has a name in the list of old names is renamed
using the corresponding name in the list of new names.  All the new
names must be unique.  Every old name must exist in the input file,
unless the old name is preceded by the character `.'.  The validity of
OLD_NAME is not checked prior to the renaming.  Thus, if OLD_NAME is
specified without the the `.' prefix and is not present in INPUT-FILE,
`ncrename' will abort.  The NEW_NAME should never be prefixed by a `.'
(the period will be included as part of the new name).  The OPTIONS and
EXAMPLES show how to select specific variables whose attributes are to
be renamed.

   `ncrename' is the exception to the normal rules that the user will
be interactively prompted before an existing file is changed, and that a
temporary copy of an output file is constructed during the operation.
If only INPUT-FILE is specified, then `ncrename' will change the names
of the INPUT-FILE in place without prompting and without creating a
temporary copy of `input-file'.  This is because the renaming operation
is considered reversible if the user makes a mistake.  The NEW_NAME can
easily be changed back to OLD_NAME by using `ncrename' one more time.

   Note that renaming a dimension to the name of a dependent variable
can be used to invert the relationship between an independent coordinate
variable and a dependent variable.  In this case, the named dependent
variable must be one-dimensional and should have no missing values.
Such a variable will become a coordinate variable.

   According to the `netCDF User's Guide', renaming properties in
netCDF files does not incur the penalty of recopying the entire file
when the NEW_NAME is shorter than the OLD_NAME.

OPTIONS

`-a OLD_NAME,NEW_NAME'
     Attribute renaming.  The old and new names of the attribute are
     specified with `-a' (or `--attribute') by the associated OLD_NAME
     and NEW_NAME values.  Global attributes are treated no differently
     than variable attributes.  This option may be specified more than
     once.  As mentioned above, all occurrences of the attribute of a
     given name will be renamed unless the `.' form is used, with one
     exception.  To change the attribute name for a particular
     variable, specify the OLD_NAME in the format
     OLD_VAR_NAME@OLD_ATT_NAME.  The `@' symbol delimits the variable
     and attribute names.  If the attribute is uniquely named (no other
     variables contain the attribute) then the
     OLD_VAR_NAME@OLD_ATT_NAME syntax is redundant.  The
     VAR_NAME@ATT_NAME syntax is accepted, but not required, for the
     NEW_NAME.

`-d OLD_NAME,NEW_NAME'
     Dimension renaming.  The old and new names of the dimension are
     specified with `-d' (or `--dmn', `--dimension') by the associated
     OLD_NAME and NEW_NAME values.  This option may be specified more
     than once.

`-v OLD_NAME,NEW_NAME'
     Variable renaming.  The old and new names of the variable are
     specified with `-v' (or `--variable') by the associated OLD_NAME
     and NEW_NAME values.  This option may be specified more than once.

EXAMPLES

   Rename the variable `p' to `pressure' and `t' to `temperature' in
netCDF `in.nc'.  In this case `p' must exist in the input file (or
`ncrename' will abort), but the presence of `t' is optional:
     ncrename -v p,pressure -v .t,temperature in.nc

   Rename the attribute `long_name' to `largo_nombre' in the variable
`u', and no other variables in netCDF `in.nc'.
     ncrename -a u:long_name,largo_nombre in.nc

   `ncrename' does not automatically attach dimensions to variables of
the same name.  If you want to rename a coordinate variable so that it
remains a coordinate variable, you must separately rename both the
dimension and the variable:
     ncrename -d lon,longitude -v lon,longitude in.nc

   Create netCDF `out.nc' identical to `in.nc' except the attribute
`_FillValue' is changed to `missing_value', the attribute `units' is
changed to `CGS_units' (but only in those variables which possess it),
the attribute `hieght' is changed to `height' in the variable `tpt',
and in the variable `prs_sfc', if it exists.
     ncrename -a _FillValue,missing_value -a .units,CGS_units \
       -a tpt@hieght,height -a prs_sfc@.hieght,height in.nc out.nc
   The presence and absence of the `.' and `@' features cause this
command to execute successfully only if a number of conditions are met.
All variables _must_ have a `_FillValue' attribute _and_ `_FillValue'
must also be a global attribute.  The `units' attribute, on the other
hand, will be renamed to `CGS_units' wherever it is found but need not
be present in the file at all (either as a global or a variable
attribute).  The variable `tpt' must contain the `hieght' attribute.
The variable `prs_sfc' need not exist, and need not contain the
`hieght' attribute.


File: nco.info,  Node: ncwa netCDF Weighted Averager,  Prev: ncrename netCDF Renamer,  Up: Operator Reference Manual

4.12 `ncwa' netCDF Weighted Averager
====================================

SYNTAX
     ncwa [-3] [-4] [-6] [-A] [-a DIM[,...]] [-B MASK_COND] [-b] [-C] [-c] [-D DBG]
     [-d DIM,[MIN][,[MAX][,[STRIDE]]] [-F] [-h] [-I] [-L DFL_LVL] [-l PATH]
     [-M MASK_VAL] [-m MASK_VAR] [-N] [-O]
     [-o OUTPUT-FILE] [-p PATH] [-R] [-r] [-T MASK_COMP]
     [-t THR_NBR] [-v VAR[,...]] [-w WEIGHT] [-X ...] [-x] [-y OP_TYP]
     INPUT-FILE [OUTPUT-FILE]

DESCRIPTION

   `ncwa' averages variables in a single file over arbitrary
dimensions, with options to specify weights, masks, and normalization.
*Note Averaging vs. Concatenating::, for a description of the
distinctions between the various averagers and concatenators.  The
default behavior of `ncwa' is to arithmetically average every numerical
variable over all dimensions and to produce a scalar result for each.

   Averaged dimensions are, by default, eliminated as dimensions.
Their corresponding coordinates, if any, are output as scalars.  The
`-b' switch (and its long option equivalents `--rdd' and
`--retain-degenerate-dimensions') causes `ncwa' to retain averaged
dimensions as degenerate (size 1) dimensions.  This maintains the
association between a dimension (or coordinate) and variables after
averaging and simplifies, for instance, later concatenation along the
degenerate dimension.

   To average variables over only a subset of their dimensions, specify
these dimensions in a comma-separated list following `-a', e.g., `-a
time,lat,lon'.  As with all arithmetic operators, the operation may be
restricted to an arbitrary hypserslab by employing the `-d' option
(*note Hyperslabs::).  `ncwa' also handles values matching the
variable's `_FillValue' attribute correctly.  Moreover, `ncwa'
understands how to manipulate user-specified weights, masks, and
normalization options.  With these options, `ncwa' can compute
sophisticated averages (and integrals) from the command line.

   MASK_VAR and WEIGHT, if specified, are broadcast to conform to the
variables being averaged.  The rank of variables is reduced by the
number of dimensions which they are averaged over.  Thus arrays which
are one dimensional in the INPUT-FILE and are averaged by `ncwa' appear
in the OUTPUT-FILE as scalars.  This allows the user to infer which
dimensions may have been averaged.  Note that that it is impossible for
`ncwa' to make make a WEIGHT or MASK_VAR of rank W conform to a VAR of
rank V if W > V.  This situation often arises when coordinate variables
(which, by definition, are one dimensional) are weighted and averaged.
`ncwa' assumes you know this is impossible and so `ncwa' does not
attempt to broadcast WEIGHT or MASK_VAR to conform to VAR in this case,
nor does `ncwa' print a warning message telling you this, because it is
so common.  Specifying DBG > 2 does cause `ncwa' to emit warnings in
these situations, however.

   Non-coordinate variables are always masked and weighted if specified.
Coordinate variables, however, may be treated specially.  By default,
an averaged coordinate variable, e.g., `latitude', appears in
OUTPUT-FILE averaged the same way as any other variable containing an
averaged dimension.  In other words, by default `ncwa' weights and masks
coordinate variables like all other variables.  This design decision
was intended to be helpful but for some applications it may be
preferable not to weight or mask coordinate variables just like all
other variables.  Consider the following arguments to `ncwa': `-a
latitude -w lat_wgt -d latitude,0.,90.' where `lat_wgt' is a weight in
the `latitude' dimension.  Since, by default `ncwa' weights coordinate
variables, the value of `latitude' in the OUTPUT-FILE depends on the
weights in LAT_WGT and is not likely to be 45.0, the midpoint latitude
of the hyperslab.  Option `-I' overrides this default behavior and
causes `ncwa' not to weight or mask coordinate variables (1).  In the
above case, this causes the value of `latitude' in the OUTPUT-FILE to
be 45.0, an appealing result.  Thus, `-I' specifies simple arithmetic
averages for the coordinate variables.  In the case of latitude, `-I'
specifies that you prefer to archive the arithmetic mean latitude of
the averaged hyperslabs rather than the area-weighted mean latitude.
(2).

   As explained in *Note Operation Types::, `ncwa' _always averages_
coordinate variables regardless of the arithmetic operation type
performed on the non-coordinate variables.  This is independent of the
setting of the `-I' option.  The mathematical definition of operations
involving rank reduction is given above (*note Operation Types::).

* Menu:

* Mask condition::
* Normalization and Integration::

   ---------- Footnotes ----------

   (1) The default behavior of (`-I') changed on 1998/12/01--before
this date the default was not to weight or mask coordinate variables.

   (2) If `lat_wgt' contains Gaussian weights then the value of
`latitude' in the OUTPUT-FILE will be the area-weighted centroid of the
hyperslab.  For the example given, this is about 30 degrees.


File: nco.info,  Node: Mask condition,  Next: Normalization and Integration,  Prev: ncwa netCDF Weighted Averager,  Up: ncwa netCDF Weighted Averager

4.12.1 Mask condition
---------------------

The mask condition has the syntax MASK_VAR MASK_COMP MASK_VAL.  The
preferred method to specify the mask condition is in one string with
the `-B' or `--mask_condition' switches.  The older method is to use
the three switches `-m', `-T', and `-M' to specify the MASK_VAR,
MASK_COMP, and MASK_VAL, respectively.  (1).  The MASK_CONDITION string
is automatically parsed into its three constituents MASK_VAR,
MASK_COMP, and MASK_VAL.

   Here MASK_VAR is the name of the masking variable (specified with
`-m', `--mask-variable', `--mask_variable', `--msk_nm', or `--msk_var').
The truth MASK_COMP argument (specified with `-T', `--mask_comparator',
`--msk_cmp_typ', or `--op_rlt' may be any one of the six arithmetic
comparators: `eq', `ne', `gt', `lt', `ge', `le'.

   These are the Fortran-style character abbreviations for the logical
comparisons ==, !=, >, <, >=, <=.

   The mask comparator defaults to `eq' (equality).  The MASK_VAL
argument to `-M' (or `--mask-value', or `--msk_val') is the right hand
side of the "mask condition".  Thus for the I'th element of the
hyperslab to be averaged, the mask condition is

   mask(i) MASK_COMP MASK_VAL.

   ---------- Footnotes ----------

   (1) The three switches `-m', `-T', and `-M' are maintained for
backward compatibility and may be deprecated in the future.  It is
safest to write scripts using `--mask_condition'.


File: nco.info,  Node: Normalization and Integration,  Prev: Mask condition,  Up: ncwa netCDF Weighted Averager

4.12.2 Normalization and Integration
------------------------------------

`ncwa' has one switch which controls the normalization of the averages
appearing in the OUTPUT-FILE.  Short option `-N' (or long options
`--nmr' or `--numerator') prevents `ncwa' from dividing the weighted
sum of the variable (the numerator in the averaging expression) by the
weighted sum of the weights (the denominator in the averaging
expression).  Thus `-N' tells `ncwa' to return just the numerator of the
arithmetic expression defining the operation (*note Operation Types::).

   With this normalization option, `ncwa' can integrate variables.
Averages are first computed as sums, and then normalized to obtain the
average.  The original sum (i.e., the numerator of the expression in
*note Operation Types::) is output if default normalization is turned
off (with `-N').  This sum is the integral (not the average) over the
specified (with `-a', or all, if none are specified) dimensions.  The
weighting variable, if specified (with `-w'), plays the role of the
differential increment and thus permits more sophisticated integrals
(i.e., weighted sums) to be output.  For example, consider the variable
`lev' where LEV = [100,500,1000] weighted by the weight `lev_wgt' where
LEV_WGT = [10,2,1].  The vertical integral of `lev', weighted by
`lev_wgt', is the dot product of LEV and LEV_WGT.  That this is
is 3000.0 can be seen by inspection and verified with the integration
command
     ncwa -N -a lev -v lev -w lev_wgt in.nc foo.nc;ncks foo.nc

EXAMPLES

   Given file `85_0112.nc':
     netcdf 85_0112 {
     dimensions:
             lat = 64 ;
             lev = 18 ;
             lon = 128 ;
             time = UNLIMITED ; // (12 currently)
     variables:
             float lat(lat) ;
             float lev(lev) ;
             float lon(lon) ;
             float time(time) ;
             float scalar_var ;
             float three_dmn_var(lat, lev, lon) ;
             float two_dmn_var(lat, lev) ;
             float mask(lat, lon) ;
             float gw(lat) ;
     }

   Average all variables in `in.nc' over all dimensions and store
results in `out.nc':
     ncwa in.nc out.nc
   All variables in `in.nc' are reduced to scalars in `out.nc' since
`ncwa' averages over all dimensions unless otherwise specified (with
`-a').

   Store the zonal (longitudinal) mean of `in.nc' in `out.nc':
     ncwa -a lon in.nc out1.nc
     ncwa -a lon -b in.nc out2.nc
   The first command turns `lon' into a scalar and the second retains
`lon' as a degenerate dimension in all variables.
     % ncks -C -H -v lon out1.nc
     lon = 135
     % ncks -C -H -v lon out2.nc
     lon[0] = 135
   In either case the tally is simply the size of `lon', i.e., for the
`85_0112.nc' file described by the sample header above.

   Compute the meridional (latitudinal) mean, with values weighted by
the corresponding element of GW (1):
     ncwa -w gw -a lat in.nc out.nc
   Here the tally is simply the size of `lat', or 64.  The sum of the
Gaussian weights is 2.0.

   Compute the area mean over the tropical Pacific:
     ncwa -w gw -a lat,lon -d lat,-20.,20. -d lon,120.,270. in.nc out.nc
   Here the tally is

   64 times 128 = 8192.

   Compute the area-mean over the globe using only points for which

   ORO < 0.5

   (2):
     ncwa -B 'ORO < 0.5'      -w gw -a lat,lon in.nc out.nc
     ncwa -m ORO -M 0.5 -T lt -w gw -a lat,lon in.nc out.nc
   It is considerably simpler to specify the complete MASK_COND with
the single string argument to `-B' than with the three separate
switches `-m', `-T', and `-M'.  If in doubt, enclose the MASK_COND with
double quotes since some of the comparators have special meanings to
the shell.

   Assuming 70% of the gridpoints are maritime, then here the tally is

   0.70 times 8192 = 5734.

   Compute the global annual mean over the maritime tropical Pacific:
     ncwa -B 'ORO < 0.5'      -w gw -a lat,lon,time \
       -d lat,-20.0,20.0 -d lon,120.0,270.0 in.nc out.nc
     ncwa -m ORO -M 0.5 -T lt -w gw -a lat,lon,time \
       -d lat,-20.0,20.0 -d lon,120.0,270.0 in.nc out.nc
   Further examples will use the one-switch specification of MASK_COND.

   Determine the total area of the maritime tropical Pacific, assuming
the variable AREA contains the area of each gridcell
     ncwa -N -v area -B 'ORO < 0.5' -a lat,lon \
       -d lat,-20.0,20.0 -d lon,120.0,270.0 in.nc out.nc
   Weighting AREA (e.g., by GW) is not appropriate because AREA is
_already_ area-weighted by definition.  Thus the `-N' switch, or,
equivalently, the `-y ttl' switch, correctly integrate the cell areas
into a total regional area.

   Mask a file to contain _FILLVALUE everywhere except where THR_MIN <=
MSK_VAR <= THR_MAX:
     # Set masking variable and its scalar thresholds
     export msk_var='three_dmn_var_dbl' # Masking variable
     export thr_max='20' # Maximum allowed value
     export thr_min='10' # Minimum allowed value
     ncecat -O in.nc out.nc # Wrap out.nc in degenerate "record" dimension
     ncwa -O -a record -B "${msk_var} <= ${thr_max}" out.nc out.nc
     ncecat -O out.nc out.nc # Wrap out.nc in degenerate "record" dimension
     ncwa -O -a record -B "${msk_var} >= ${thr_min}" out.nc out.nc
   After the first use of `ncwa', `out.nc' contains _FILLVALUE where
`${msk_var} >= ${thr_max}'.  The process is then repeated on the
remaining data to filter out points where `${msk_var} <= ${thr_min}'.
The resulting `out.nc' contains valid data only where THR_MIN <=
MSK_VAR <= THR_MAX.

   ---------- Footnotes ----------

   (1) `gw' stands for "Gaussian weight" in many climate models.

   (2) `ORO' stands for "Orography" in some climate models and in those
models ORO < 0.5 selects ocean gridpoints.


File: nco.info,  Node: Contributing,  Next: CCSM Example,  Prev: Operator Reference Manual,  Up: Top

5 Contributing
**************

We welcome contributions from anyone.  The project homepage at
`https://sf.net/projects/nco' contains more information on how to
contribute.

   Financial contributions to NCO development may be made through
PayPal
(https://www.paypal.com/xclick/business=zender%40uci.edu&item_name=NCO+development&item_number=nco_dnt_dvl&no_note=1&tax=0&currency_code=USD).
NCO has been shared for over 10 years yet only two users have
contributed any money to the developers (1).  So you could be the third!

* Menu:

* Contributors::
* Proposals for Institutional Funding::

   ---------- Footnotes ----------

   (1) Happy users have sent me a few gifts, though.  This includes a
box of imported chocolate.  Mmm.  Appreciation and gifts are definitely
better than money.  Naturally, I'm too lazy to split and send gifts to
the other developers.  However, unlike some NCO developers, I have a
steady "real job".  My intent is to split monetary donations among the
active developers and to send them their shares via PayPal.


File: nco.info,  Node: Contributors,  Next: Proposals for Institutional Funding,  Prev: Contributing,  Up: Contributing

5.1 Contributors
================

The primary contributors to NCO development have been:
Charlie Zender
     Concept, design and implementation of operators from 1995-2000.
     Since then autotools, bug-squashing, chunking, documentation,
     packing, NCO library redesign, `ncap2' features, `ncbo', `ncpdq',
     SMP threading and MPI parallelization, netCDF4 integration,
     external funding, project management, science research, releases.  

Henry Butowsky
     Non-linear operations and `min()', `max()', `total()' support in
     `ncra' and `ncwa'.  Type conversion for arithmetic.  Migration to
     netCDF3 API.  `ncap' parser, lexer, and I/O.  Multislabbing
     algorithm.  Variable wildcarding.  Various hacks.  `ncap2'
     language.  

Rorik Peterson
     Original autotool build support.  Long command-line options.
     Original UDUnits support.  Debianization.  Numerous bug-fixes.  

Daniel Wang
     Script Workflow Analysis for MultiProcessing (SWAMP).  RPM support.  

Harry Mangalam
     Benchmarking.  OPeNDAP configuration.  

Brian Mays
     Original packaging for Debian GNU/Linux, `nroff' man pages.  

George Shapovalov
     Packaging for Gentoo GNU/Linux.  

Bill Kocik
     Memory management.  

Len Makin
     NEC SX architecture support.  

Jim Edwards
     AIX architecture support.  

Juliana Rew
     Compatibility with large PIDs.  

Karen Schuchardt
     Auxiliary coordinate support.  

Gayathri Venkitachalam
     MPI implementation.  

Scott Capps
     Large work-load testing 

Martin Dix, Mark Flanner, Keith Lindsay, Mike Page, Martin Schmidt, Michael Schulz, Remik Ziemlinski
     Excellent bug reports and feature requests.  

Markus Liebig
     Proof-read the ncap documentation 

Daniel Baumann, Barry deFreese, Francesco Lovergine, Matej Vela
     Debian packaging 

Patrice Dumas, Ed Hill, Orion Poplawski
     RedHat packaging 

George Shapavalov, Patrick Kursawe
     Gentoo packaging 

Filipe Fernandes
     OpenSuse packaging 

Takeshi Enomoto, Alexander Hansen
     MacIntosh packaging
   Please let me know if your name was omitted!

* Menu:

* Proposals for Institutional Funding::


File: nco.info,  Node: Proposals for Institutional Funding,  Prev: Contributors,  Up: Contributing

5.2 Proposals for Institutional Funding
=======================================

NSF has funded a project (http://nco.sf.net#prp_sei) to improve
Distributed Data Reduction & Analysis (DDRA) by evolving NCO into a
suite of Scientific Data Operators called SDO.  The two main components
of this project are NCO parallelism (OpenMP, MPI) and Server-Side DDRA
(SSDDRA) implemented through extensions to OPeNDAP and netCDF4.  This
project will dramatically reduce bandwidth usage for NCO DDRA.

   With this first NCO proposal funded, the content of the next NCO
proposal is clear.  We are interested in obtaining NASA support for
HDF-specific enhancements to NCO.  We plan to submit a proposal to the
next suitable NASA NRA or NSF opportunity.

   We are considering a lot of interesting ideas for still more
proposals.  Please contact us if you wish to be involved with any future
NCO-related proposals.  Comments on the proposals and letters of
support are also very welcome.


File: nco.info,  Node: CCSM Example,  Next: mybibnode,  Prev: Contributing,  Up: Top

6 CCSM Example
**************

This chapter illustrates how to use NCO to process and analyze the
results of a CCSM climate simulation.
     ************************************************************************
     Task 0: Finding input files
     ************************************************************************
     The CCSM model outputs files to a local directory like:

     /ptmp/zender/archive/T42x1_40

     Each component model has its own subdirectory, e.g.,

     /ptmp/zender/archive/T42x1_40/atm
     /ptmp/zender/archive/T42x1_40/cpl
     /ptmp/zender/archive/T42x1_40/ice
     /ptmp/zender/archive/T42x1_40/lnd
     /ptmp/zender/archive/T42x1_40/ocn

     within which model output is tagged with the particular model name

     /ptmp/zender/archive/T42x1_40/atm/T42x1_40.cam2.h0.0001-01.nc
     /ptmp/zender/archive/T42x1_40/atm/T42x1_40.cam2.h0.0001-02.nc
     /ptmp/zender/archive/T42x1_40/atm/T42x1_40.cam2.h0.0001-03.nc
     ...
     /ptmp/zender/archive/T42x1_40/atm/T42x1_40.cam2.h0.0001-12.nc
     /ptmp/zender/archive/T42x1_40/atm/T42x1_40.cam2.h0.0002-01.nc
     /ptmp/zender/archive/T42x1_40/atm/T42x1_40.cam2.h0.0002-02.nc
     ...

     or

     /ptmp/zender/archive/T42x1_40/lnd/T42x1_40.clm2.h0.0001-01.nc
     /ptmp/zender/archive/T42x1_40/lnd/T42x1_40.clm2.h0.0001-02.nc
     /ptmp/zender/archive/T42x1_40/lnd/T42x1_40.clm2.h0.0001-03.nc
     ...

     ************************************************************************
     Task 1: Regional processing
     ************************************************************************
     The first task in data processing is often creating seasonal cycles.
     Imagine a 100-year simulation with its 1200 monthly mean files.
     Our goal is to create a single file containing 12 months of data.
     Each month in the output file is the mean of 100 input files.

     Normally, we store the "reduced" data in a smaller, local directory.

     caseid='T42x1_40'
     #drc_in="${DATA}/archive/${caseid}/atm"
     drc_in="${DATA}/${caseid}"
     drc_out="${DATA}/${caseid}"
     mkdir -p ${drc_out}
     cd ${drc_out}

     Method 1: Assume all data in directory applies
     for mth in {1..12}; do
       mm=`printf "%02d" $mth`
       ncra -O -D 1 -o ${drc_out}/${caseid}_clm${mm}.nc \
         ${drc_in}/${caseid}.cam2.h0.*-${mm}.nc
     done # end loop over mth

     Method 2: Use shell 'globbing' to construct input filenames
     for mth in {1..12}; do
       mm=`printf "%02d" $mth`
       ncra -O -D 1 -o ${drc_out}/${caseid}_clm${mm}.nc \
         ${drc_in}/${caseid}.cam2.h0.00??-${mm}.nc \
         ${drc_in}/${caseid}.cam2.h0.0100-${mm}.nc
     done # end loop over mth

     Method 3: Construct input filename list explicitly
     for mth in {1..12}; do
       mm=`printf "%02d" $mth`
       fl_lst_in=''
       for yr in {1..100}; do
         yyyy=`printf "%04d" $yr`
         fl_in=${caseid}.cam2.h0.${yyyy}-${mm}.nc
         fl_lst_in="${fl_lst_in} ${caseid}.cam2.h0.${yyyy}-${mm}.nc"
       done # end loop over yr
       ncra -O -D 1 -o ${drc_out}/${caseid}_clm${mm}.nc -p ${drc_in} \
         ${fl_lst_in}
     done # end loop over mth

     Make sure the output file averages correct input files!
     ncks -M prints global metadata:

       ncks -M ${drc_out}/${caseid}_clm01.nc

     The input files ncra used to create the climatological monthly mean
     will appear in the global attribute named 'history'.

     Use ncrcat to aggregate the climatological monthly means

       ncrcat -O -D 1 \
         ${drc_out}/${caseid}_clm??.nc ${drc_out}/${caseid}_clm_0112.nc

     Finally, create climatological means for reference.
     The climatological time-mean:

       ncra -O -D 1 \
         ${drc_out}/${caseid}_clm_0112.nc ${drc_out}/${caseid}_clm.nc

     The climatological zonal-mean:

       ncwa -O -D 1 -a lon \
         ${drc_out}/${caseid}_clm.nc ${drc_out}/${caseid}_clm_x.nc

     The climatological time- and spatial-mean:

       ncwa -O -D 1 -a lon,lat,time -w gw \
         ${drc_out}/${caseid}_clm.nc ${drc_out}/${caseid}_clm_xyt.nc

     This file contains only scalars, e.g., "global mean temperature",
     used for summarizing global results of a climate experiment.

     Climatological monthly anomalies = Annual Cycle:
     Subtract climatological mean from climatological monthly means.
     Result is annual cycle, i.e., climate-mean has been removed.

       ncbo -O -D 1 -o ${drc_out}/${caseid}_clm_0112_anm.nc \
         ${drc_out}/${caseid}_clm_0112.nc ${drc_out}/${caseid}_clm_xyt.nc

     ************************************************************************
     Task 2: Correcting monthly averages
     ************************************************************************
     The previous step appoximates all months as being equal, so, e.g.,
     February weighs slightly too much in the climatological mean.
     This approximation can be removed by weighting months appropriately.
     We must add the number of days per month to the monthly mean files.
     First, create a shell variable dpm:

     unset dpm # Days per month
     declare -a dpm
     dpm=(0 31 28.25 31 30 31 30 31 31 30 31 30 31) # Allows 1-based indexing

     Method 1: Create dpm directly in climatological monthly means
     for mth in {1..12}; do
       mm=`printf "%02d" ${mth}`
       ncap2 -O -s "dpm=0.0*date+${dpm[${mth}]}" \
         ${drc_out}/${caseid}_clm${mm}.nc ${drc_out}/${caseid}_clm${mm}.nc
     done # end loop over mth

     Method 2: Create dpm by aggregating small files
     for mth in {1..12}; do
       mm=`printf "%02d" ${mth}`
       ncap2 -O -v -s "dpm=${dpm[${mth}]}" ~/nco/data/in.nc \
         ${drc_out}/foo_${mm}.nc
     done # end loop over mth
     ncecat -O -D 1 -p ${drc_out} -n 12,2,2 foo_${mm}.nc foo.nc
     ncrename -O -D 1 -d record,time ${drc_out}/foo.nc
     ncatted -O -h \
       -a long_name,dpm,o,c,"Days per month" \
       -a units,dpm,o,c,"days" \
       ${drc_out}/${caseid}_clm_0112.nc
     ncks -A -v dpm ${drc_out}/foo.nc ${drc_out}/${caseid}_clm_0112.nc

     Method 3: Create small netCDF file using ncgen
     cat > foo.cdl << EOF
     netcdf foo {
     dimensions:
     	time=unlimited;
     variables:
     	float dpm(time);
     	dpm:long_name="Days per month";
     	dpm:units="days";
     data:
     	dpm=31,28.25,31,30,31,30,31,31,30,31,30,31;
     }
     EOF
     ncgen -b -o foo.nc foo.cdl
     ncks -A -v dpm ${drc_out}/foo.nc ${drc_out}/${caseid}_clm_0112.nc

     Another way to get correct monthly weighting is to average daily
     output files, if available.

     ************************************************************************
     Task 3: Regional processing
     ************************************************************************
     Let's say you are interested in examining the California region.
     Hyperslab your dataset to isolate the appropriate latitude/longitudes.

       ncks -O -D 1 -d lat,30.0,37.0 -d lon,240.0,270.0 \
         ${drc_out}/${caseid}_clm_0112.nc ${drc_out}/${caseid}_clm_0112_Cal.nc

     The dataset is now much smaller!
     To examine particular metrics.

     ************************************************************************
     Task 4: Accessing data stored remotely
     ************************************************************************
     OPeNDAP server examples:

     UCI DAP servers:
     ncks -M -p http://dust.ess.uci.edu/cgi-bin/dods/nph-dods/dodsdata in.nc
     ncrcat -O -C -D 3 -p http://dust.ess.uci.edu/cgi-bin/dods/nph-dods/dodsdata \
       -l /tmp in.nc in.nc ~/foo.nc

     NOAA DAP servers:
     ncwa -O -C -a lat,lon,time -d lon,-10.,10. -d lat,-10.,10. -l /tmp -p \
     http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/surface \
     pres.sfc.1969.nc ~/foo.nc

     LLNL PCMDI IPCC OPeNDAP Data Portal:
     ncks -M -p http://username:password@esgcet.llnl.gov/cgi-bin/dap-cgi.py/ipcc4/sresa1b/ncar_ccsm3_0 pcmdi.ipcc4.ncar_ccsm3_0.sresa1b.run1.atm.mo.xml

     Earth System Grid (ESG): http://www.earthsystemgrid.org

     caseid='b30.025.ES01'
     CCSM3.0 1% increasing CO2 run, T42_gx1v3, 200 years starting in year 400
     Atmospheric post-processed data, monthly averages, e.g.,
     /data/zender/tmp/b30.025.ES01.cam2.h0.TREFHT.0400-01_cat_0449-12.nc
     /data/zender/tmp/b30.025.ES01.cam2.h0.TREFHT.0400-01_cat_0599-12.nc

     ESG supports password-protected FTP access by registered users
     NCO uses the .netrc file, if present, for password-protected FTP access
     Syntax for accessing single file is, e.g.,
     ncks -O -D 3 \
       -p ftp://climate.llnl.gov/sresa1b/atm/mo/tas/ncar_ccsm3_0/run1 \
       -l /tmp tas_A1.SRESA1B_1.CCSM.atmm.2000-01_cat_2099-12.nc ~/foo.nc

     # Average surface air temperature tas for SRESA1B scenario
     # This loop is illustrative and will not work until NCO correctly
     # translates '*' to FTP 'mget' all remote files
     for var in 'tas'; do
     for scn in 'sresa1b'; do
     for mdl in 'cccma_cgcm3_1 cccma_cgcm3_1_t63 cnrm_cm3 csiro_mk3_0 \
     gfdl_cm2_0 gfdl_cm2_1 giss_aom giss_model_e_h giss_model_e_r \
     iap_fgoals1_0_g inmcm3_0 ipsl_cm4 miroc3_2_hires miroc3_2_medres \
     miub_echo_g mpi_echam5 mri_cgcm2_3_2a ncar_ccsm3_0 ncar_pcm1 \
     ukmo_hadcm3 ukmo_hadgem1'; do
     for run in '1'; do
             ncks -R -O -D 3 -p ftp://climate.llnl.gov/${scn}/atm/mo/${var}/${mdl}/run${run} -l ${DATA}/${scn}/atm/mo/${var}/${mdl}/run${run} '*' ${scn}_${mdl}_${run}_${var}_${yyyymm}_${yyyymm}.nc
     done # end loop over run
     done # end loop over mdl
     done # end loop over scn
     done # end loop over var

     cd sresa1b/atm/mo/tas/ukmo_hadcm3/run1/
     ncks -H -m -v lat,lon,lat_bnds,lon_bnds -M tas_A1.nc | m
     bds -x 096 -y 073 -m 33 -o ${DATA}/data/dst_3.75x2.5.nc # ukmo_hadcm3
     ncview ${DATA}/data/dst_3.75x2.5.nc

     # msk_rgn is California mask on ukmo_hadcm3 grid
     # area is correct area weight on ukmo_hadcm3 grid
     ncks -A -v area,msk_rgn ${DATA}/data/dst_3.75x2.5.nc \
     ${DATA}/sresa1b/atm/mo/tas/ukmo_hadcm3/run1/area_msk_ukmo_hadcm3.nc

     Template for standardized data:
     ${scn}_${mdl}_${run}_${var}_${yyyymm}_${yyyymm}.nc

     e.g., raw data
     ${DATA}/sresa1b/atm/mo/tas/ukmo_hadcm3/run1/tas_A1.nc
     becomes standardized data

     Level 0: raw from IPCC site--no changes except for name
              Make symbolic link name match raw data
     Template: ${scn}_${mdl}_${run}_${var}_${yyyymm}_${yyyymm}.nc

     ln -s -f tas_A1.nc sresa1b_ukmo_hadcm3_run1_tas_200101_209911.nc
     area_msk_ukmo_hadcm3.nc

     Level I: Add all variables (but not standardized in time)
              to file containing msk_rgn and area
     Template: ${scn}_${mdl}_${run}_${yyyymm}_${yyyymm}.nc

     /bin/cp area_msk_ukmo_hadcm3.nc sresa1b_ukmo_hadcm3_run1_200101_209911.nc
     ncks -A -v tas sresa1b_ukmo_hadcm3_run1_tas_200101_209911.nc \
                    sresa1b_ukmo_hadcm3_run1_200101_209911.nc
     ncks -A -v pr  sresa1b_ukmo_hadcm3_run1_pr_200101_209911.nc \
                    sresa1b_ukmo_hadcm3_run1_200101_209911.nc

     If already have file then:
     mv sresa1b_ukmo_hadcm3_run1_200101_209911.nc foo.nc
     /bin/cp area_msk_ukmo_hadcm3.nc sresa1b_ukmo_hadcm3_run1_200101_209911.nc
     ncks -A -v tas,pr foo.nc sresa1b_ukmo_hadcm3_run1_200101_209911.nc

     Level II: Correct # years, months
     Template: ${scn}_${mdl}_${run}_${var}_${yyyymm}_${yyyymm}.nc

     ncks -d time,....... file1.nc file2.nc
     ncrcat file2.nc file3.nc sresa1b_ukmo_hadcm3_run1_200001_209912.nc

     Level III: Many derived products from level II, e.g.,

           A. Global mean timeseries
           ncwa -w area -a lat,lon \
                sresa1b_ukmo_hadcm3_run1_200001_209912.nc \
     	   sresa1b_ukmo_hadcm3_run1_200001_209912_xy.nc

           B. Califoria average timeseries
           ncwa -m msk_rgn -w area -a lat,lon \
                sresa1b_ukmo_hadcm3_run1_200001_209912.nc \
     	   sresa1b_ukmo_hadcm3_run1_200001_209912_xy_Cal.nc


File: nco.info,  Node: mybibnode,  Next: General Index,  Prev: CCSM Example,  Up: Top

7 References
************

     [ZeM07]  Zender, C. S., and H. J. Mangalam (2007), Scaling
     Properties of Common Statistical Operators for Gridded Datasets,
     Int. J. High Perform. Comput. Appl., 21(4), 485-498,
     doi:10.1177/1094342007083802.

     [Zen08]  Zender, C. S. (2008), Analysis of Self-describing Gridded
     Geoscience Data with netCDF Operators (NCO), Environ. Modell.
     Softw., 23(10), 1338-1342, doi:10.1016/j.envsoft.2008.03.004.

     [WZJ07]  Wang, D. L., C. S. Zender, and S. F. Jenks (2007),
     DAP-enabled Server-side Data Reduction and Analysis, Proceedings
     of the 23rd AMS Conference on Interactive Information and
     Processing Systems (IIPS) for Meteorology, Oceanography, and
     Hydrology, Paper 3B.2, January 14-18, San Antonio, TX. American
     Meteorological Society, AMS Press, Boston, MA.

     [ZMW06]  Zender, C. S., H. Mangalam, and D. L. Wang (2006),
     Improving Scaling Properties of Common Statistical Operators for
     Gridded Geoscience Datasets, Eos Trans. AGU, 87(52), Fall Meet.
     Suppl., Abstract IN53B-0827.

     [ZeW07]  Zender, C. S., and D. L. Wang (2007), High performance
     distributed data reduction and analysis with the netCDF Operators
     (NCO), Proceedings of the 23rd AMS Conference on Interactive
     Information and Processing Systems (IIPS) for Meteorology,
     Oceanography, and Hydrology, Paper 3B.4, January 14-18, San
     Antonio, TX. American Meteorological Society, AMS Press, Boston,
     MA.

     [WZJ06]  Wang, D. L., C. S. Zender, and S. F. Jenks (2006),
     Server-side netCDF Data Reduction and Analysis, Eos Trans. AGU,
     87(52), Fall Meet. Suppl., Abstract IN53B-0826.

     [WZJ073]  Wang, D. L., C. S. Zender, and S. F. Jenks (2007),
     Server-side parallel data reduction and analysis, in Advances in
     Grid and Pervasive Computing, Second International Conference, GPC
     2007, Paris, France, May 2-4, 2007, Proceedings. IEEE Lecture
     Notes in Computer Science, vol. 4459, edited by C. Cerin and K.-C.
     Li, pp. 744-750, Springer-Verlag, Berlin/Heidelberg,
     doi:10.1007/978-3-540-72360-8_67.

     [WZJ074]  Wang, D. L., C. S. Zender and S. F. Jenks (2007), A
     System for Scripted Data Analysis at Remote Data Centers, Eos
     Trans. AGU, 88(52), Fall Meet. Suppl., Abstract IN11B-0469.

     [WZJ081]  Wang, D. L., C. S. Zender and S. F. Jenks (2008),
     Cluster Workflow Execution of Retargeted Data Analysis Scripts,
     Proceedings of the 8th IEEE Int'l Symposium on Cluster Computing
     and the Grid (IEEE CCGRID '08), pp. 449-458, Lyon, France, May
     2008.

     [WZJ091]  Wang, D. L., C. S. Zender, and S. F. Jenks (2009),
     Efficient Clustered Server-side Data Analysis Workflows using
     SWAMP, Earth Sci. Inform., 2(3), 141-155,
     doi:10.1007/s12145-009-0021-z.


File: nco.info,  Node: General Index,  Prev: mybibnode,  Up: Top

General Index
*************

 [index ]
* Menu:

* " (double quote):                      ncatted netCDF Attribute Editor.
                                                              (line 200)
* #include:                              Syntax of ncap2 statements.
                                                              (line  28)
* $ (wildcard character):                Subsetting Variables.
                                                              (line  50)
* % (modulus):                           Intrinsic mathematical methods.
                                                              (line   7)
* ' (end quote):                         ncatted netCDF Attribute Editor.
                                                              (line 200)
* *:                                     ncbo netCDF Binary Operator.
                                                              (line  21)
* * (filename expansion):                Subsetting Variables.
                                                              (line  50)
* * (multiplication):                    Intrinsic mathematical methods.
                                                              (line   7)
* * (wildcard character):                Subsetting Variables.
                                                              (line  59)
* +:                                     ncbo netCDF Binary Operator.
                                                              (line  21)
* + (addition):                          Intrinsic mathematical methods.
                                                              (line   7)
* + (wildcard character):                Subsetting Variables.
                                                              (line  59)
* -:                                     ncbo netCDF Binary Operator.
                                                              (line  21)
* - (subtraction):                       Intrinsic mathematical methods.
                                                              (line   7)
* --3:                                   Selecting Output File Format.
                                                              (line   6)
* --4:                                   Selecting Output File Format.
                                                              (line   6)
* --64bit:                               Selecting Output File Format.
                                                              (line   6)
* --abc:                                 ncks netCDF Kitchen Sink.
                                                              (line 102)
* --alphabetize:                         ncks netCDF Kitchen Sink.
                                                              (line 102)
* --apn <1>:                             ncks netCDF Kitchen Sink.
                                                              (line 277)
* --apn <2>:                             Batch Mode.          (line   6)
* --apn:                                 Temporary Output Files.
                                                              (line  25)
* --append <1>:                          ncks netCDF Kitchen Sink.
                                                              (line 277)
* --append <2>:                          Batch Mode.          (line   6)
* --append:                              Temporary Output Files.
                                                              (line  25)
* --auxiliary:                           Auxiliary Coordinates.
                                                              (line   6)
* --auxiliary LON_MIN,LON_MAX,LAT_MIN,LAT_MAX: Auxiliary Coordinates.
                                                              (line   6)
* --binary:                              ncks netCDF Kitchen Sink.
                                                              (line 112)
* --bnr:                                 ncks netCDF Kitchen Sink.
                                                              (line 112)
* --chunk_dimension:                     Chunking.            (line   6)
* --chunk_map:                           Chunking.            (line   6)
* --chunk_policy:                        Chunking.            (line   6)
* --chunk_scalar:                        Chunking.            (line   6)
* --cnk_dmn:                             Chunking.            (line   6)
* --cnk_map:                             Chunking.            (line   6)
* --cnk_map CNK_MAP:                     Chunking.            (line  68)
* --cnk_plc:                             Chunking.            (line   6)
* --cnk_scl:                             Chunking.            (line   6)
* --coords <1>:                          CF Conventions.      (line  57)
* --coords:                              Subsetting Coordinate Variables.
                                                              (line   6)
* --crd <1>:                             CF Conventions.      (line  57)
* --crd:                                 Subsetting Coordinate Variables.
                                                              (line   6)
* --dbg_lvl DEBUG-LEVEL <1>:             Command Line Options.
                                                              (line  24)
* --dbg_lvl DEBUG-LEVEL <2>:             Large Datasets.      (line  37)
* --dbg_lvl DEBUG-LEVEL:                 Help Requests and Bug Reports.
                                                              (line  61)
* --debug-level DEBUG-LEVEL <1>:         Large Datasets.      (line  37)
* --debug-level DEBUG-LEVEL:             Help Requests and Bug Reports.
                                                              (line  61)
* --deflate:                             Deflation.           (line   6)
* --dfl_lvl:                             Deflation.           (line   6)
* --dimension DIM,[MIN],[MAX],STRIDE:    Stride.              (line   6)
* --dimension DIM,[MIN][,[MAX][,[STRIDE]]] <1>: UDUnits Support.
                                                              (line   6)
* --dimension DIM,[MIN][,[MAX][,[STRIDE]]] <2>: Wrapped Coordinates.
                                                              (line   6)
* --dimension DIM,[MIN][,[MAX][,[STRIDE]]] <3>: Multislabs.   (line   6)
* --dimension DIM,[MIN][,[MAX][,[STRIDE]]]: Hyperslabs.       (line   6)
* --dmn DIM,[MIN],[MAX],STRIDE:          Stride.              (line   6)
* --dmn DIM,[MIN][,[MAX][,[STRIDE]]] <1>: UDUnits Support.    (line   6)
* --dmn DIM,[MIN][,[MAX][,[STRIDE]]] <2>: Wrapped Coordinates.
                                                              (line   6)
* --dmn DIM,[MIN][,[MAX][,[STRIDE]]] <3>: Multislabs.         (line   6)
* --dmn DIM,[MIN][,[MAX][,[STRIDE]]]:    Hyperslabs.          (line   6)
* --exclude <1>:                         ncks netCDF Kitchen Sink.
                                                              (line 271)
* --exclude:                             Subsetting Variables.
                                                              (line   6)
* --file_format:                         Selecting Output File Format.
                                                              (line   6)
* --file_list:                           File List Attributes.
                                                              (line   6)
* --fix_rec_dmn:                         ncks netCDF Kitchen Sink.
                                                              (line 128)
* --fl_bnr:                              ncks netCDF Kitchen Sink.
                                                              (line 119)
* --fl_fmt:                              Selecting Output File Format.
                                                              (line   6)
* --fl_lst_in:                           File List Attributes.
                                                              (line   6)
* --fl_out FL_OUT:                       Specifying Output Files.
                                                              (line   6)
* --fl_spt:                              ncap2 netCDF Arithmetic Processor.
                                                              (line  23)
* --fnc_tbl:                             Intrinsic mathematical methods.
                                                              (line 142)
* --fortran:                             C and Fortran Index Conventions.
                                                              (line   6)
* --glb_mtd_spr:                         ncecat netCDF Ensemble Concatenator.
                                                              (line  41)
* --hdr_pad HDR_PAD:                     Metadata Optimization.
                                                              (line   6)
* --header_pad HDR_PAD:                  Metadata Optimization.
                                                              (line   6)
* --hieronymus:                          ncks netCDF Kitchen Sink.
                                                              (line 135)
* --history:                             History Attribute.   (line   6)
* --hst:                                 History Attribute.   (line   6)
* --lcl OUTPUT-PATH:                     Remote storage.      (line   6)
* --local OUTPUT-PATH:                   Remote storage.      (line   6)
* --map CNK_MAP:                         Chunking.            (line  68)
* --map PCK_MAP:                         ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  75)
* --mask-value MASK_VAL:                 Mask condition.      (line  23)
* --mask-variable MASK_VAR:              ncwa netCDF Weighted Averager.
                                                              (line  42)
* --mask_comparator MASK_COMP:           Mask condition.      (line   6)
* --mask_condition MASK_COND <1>:        Mask condition.      (line   6)
* --mask_condition MASK_COND:            ncwa netCDF Weighted Averager.
                                                              (line  42)
* --mask_value MASK_VAL:                 Mask condition.      (line  23)
* --mask_variable MASK_VAR:              ncwa netCDF Weighted Averager.
                                                              (line  42)
* --metadata:                            ncks netCDF Kitchen Sink.
                                                              (line 216)
* --Metadata:                            ncks netCDF Kitchen Sink.
                                                              (line 179)
* --mk_rec_dmn DIM:                      ncks netCDF Kitchen Sink.
                                                              (line 132)
* --msk_cmp_typ MASK_COMP:               Mask condition.      (line   6)
* --msk_cnd MASK_COND:                   ncwa netCDF Weighted Averager.
                                                              (line  42)
* --msk_cnd_sng MASK_COND:               Mask condition.      (line   6)
* --msk_nm MASK_VAR:                     ncwa netCDF Weighted Averager.
                                                              (line  42)
* --msk_val MASK_VAL:                    Mask condition.      (line  23)
* --msk_var MASK_VAR:                    ncwa netCDF Weighted Averager.
                                                              (line  42)
* --mtd:                                 ncks netCDF Kitchen Sink.
                                                              (line 216)
* --Mtd:                                 ncks netCDF Kitchen Sink.
                                                              (line 179)
* --netcdf4:                             Selecting Output File Format.
                                                              (line   6)
* --nintap LOOP:                         Specifying Input Files.
                                                              (line   6)
* --no-coords <1>:                       CF Conventions.      (line  57)
* --no-coords:                           Subsetting Coordinate Variables.
                                                              (line   6)
* --no-crd <1>:                          CF Conventions.      (line  57)
* --no-crd:                              Subsetting Coordinate Variables.
                                                              (line   6)
* --no_rec_dmn:                          ncks netCDF Kitchen Sink.
                                                              (line 128)
* --omp_num_threads THR_NBR:             OpenMP Threading.    (line   6)
* --op_rlt MASK_COMP:                    Mask condition.      (line   6)
* --op_typ OP_TYP <1>:                   ncbo netCDF Binary Operator.
                                                              (line  21)
* --op_typ OP_TYP:                       Operation Types.     (line   6)
* --operation OP_TYP <1>:                ncbo netCDF Binary Operator.
                                                              (line  21)
* --operation OP_TYP:                    Operation Types.     (line   6)
* --output FL_OUT:                       Specifying Output Files.
                                                              (line   6)
* --overwrite <1>:                       Batch Mode.          (line   6)
* --overwrite:                           Temporary Output Files.
                                                              (line  25)
* --ovr <1>:                             Batch Mode.          (line   6)
* --ovr:                                 Temporary Output Files.
                                                              (line  25)
* --pack_policy PCK_PLC:                 ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  28)
* --path INPUT-PATH <1>:                 Remote storage.      (line   6)
* --path INPUT-PATH:                     Specifying Input Files.
                                                              (line   6)
* --pck_map PCK_MAP:                     ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  75)
* --pck_plc PCK_PLC:                     ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  28)
* --print:                               ncks netCDF Kitchen Sink.
                                                              (line 225)
* --prn:                                 ncks netCDF Kitchen Sink.
                                                              (line 225)
* --prn_fnc_tbl:                         Intrinsic mathematical methods.
                                                              (line 142)
* --pth INPUT-PATH <1>:                  Remote storage.      (line   6)
* --pth INPUT-PATH:                      Specifying Input Files.
                                                              (line   6)
* --quiet:                               ncks netCDF Kitchen Sink.
                                                              (line 237)
* --rcd_nm ULM_NM:                       ncecat netCDF Ensemble Concatenator.
                                                              (line  23)
* --retain:                              Retaining Retrieved Files.
                                                              (line   6)
* --revision <1>:                        Operator Version.    (line   6)
* --revision:                            Help Requests and Bug Reports.
                                                              (line  61)
* --rtn:                                 Retaining Retrieved Files.
                                                              (line   6)
* --script:                              ncap2 netCDF Arithmetic Processor.
                                                              (line  23)
* --script-file:                         ncap2 netCDF Arithmetic Processor.
                                                              (line  23)
* --sng_fmt:                             ncks netCDF Kitchen Sink.
                                                              (line 245)
* --spt:                                 ncap2 netCDF Arithmetic Processor.
                                                              (line  23)
* --string:                              ncks netCDF Kitchen Sink.
                                                              (line 245)
* --thr_nbr THR_NBR:                     OpenMP Threading.    (line   6)
* --threads THR_NBR:                     OpenMP Threading.    (line   6)
* --ulm_nm ULM_NM:                       ncecat netCDF Ensemble Concatenator.
                                                              (line  23)
* --units:                               ncks netCDF Kitchen Sink.
                                                              (line 250)
* --unpack:                              ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  59)
* --upk:                                 ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  59)
* --variable VAR <1>:                    ncks netCDF Kitchen Sink.
                                                              (line 271)
* --variable VAR:                        Subsetting Variables.
                                                              (line   6)
* --version <1>:                         Operator Version.    (line   6)
* --version:                             Help Requests and Bug Reports.
                                                              (line  61)
* --vrs <1>:                             Operator Version.    (line   6)
* --vrs:                                 Help Requests and Bug Reports.
                                                              (line  61)
* --weight WEIGHT:                       ncwa netCDF Weighted Averager.
                                                              (line  42)
* --weight WGT1[,WGT2]:                  ncflint netCDF File Interpolator.
                                                              (line  30)
* --wgt_var WEIGHT:                      ncwa netCDF Weighted Averager.
                                                              (line  42)
* --wgt_var WGT1[,WGT2]:                 ncflint netCDF File Interpolator.
                                                              (line  30)
* --xcl <1>:                             ncks netCDF Kitchen Sink.
                                                              (line 271)
* --xcl:                                 Subsetting Variables.
                                                              (line   6)
* -3 <1>:                                Selecting Output File Format.
                                                              (line   6)
* -3:                                    netCDF2/3/4 and HDF4/5 Support.
                                                              (line  76)
* -4 <1>:                                Selecting Output File Format.
                                                              (line   6)
* -4:                                    netCDF2/3/4 and HDF4/5 Support.
                                                              (line  76)
* -A <1>:                                ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 184)
* -A:                                    ncks netCDF Kitchen Sink.
                                                              (line 277)
* -a:                                    ncks netCDF Kitchen Sink.
                                                              (line 102)
* -A <1>:                                Batch Mode.          (line   6)
* -A:                                    Temporary Output Files.
                                                              (line  25)
* -b:                                    ncks netCDF Kitchen Sink.
                                                              (line 119)
* -B:                                    ncks netCDF Kitchen Sink.
                                                              (line 112)
* -b <1>:                                ncbo netCDF Binary Operator.
                                                              (line 118)
* -b:                                    Examples ncap2.      (line 115)
* -B MASK_COND <1>:                      Mask condition.      (line   6)
* -B MASK_COND:                          ncwa netCDF Weighted Averager.
                                                              (line  42)
* -C:                                    Examples ncap2.      (line 127)
* -c:                                    CF Conventions.      (line  57)
* -C:                                    CF Conventions.      (line  57)
* -c:                                    Subsetting Coordinate Variables.
                                                              (line   6)
* -C:                                    Subsetting Coordinate Variables.
                                                              (line   6)
* -D:                                    Help Requests and Bug Reports.
                                                              (line  46)
* -D DEBUG-LEVEL <1>:                    Command Line Options.
                                                              (line  24)
* -D DEBUG-LEVEL <2>:                    Large Datasets.      (line  37)
* -D DEBUG-LEVEL:                        Help Requests and Bug Reports.
                                                              (line  61)
* -d DIM,[MIN],[MAX],STRIDE:             Stride.              (line   6)
* -d DIM,[MIN][,[MAX][,[STRIDE]]] <1>:   UDUnits Support.     (line   6)
* -d DIM,[MIN][,[MAX][,[STRIDE]]] <2>:   Wrapped Coordinates. (line   6)
* -d DIM,[MIN][,[MAX][,[STRIDE]]] <3>:   Multislabs.          (line   6)
* -d DIM,[MIN][,[MAX][,[STRIDE]]]:       Hyperslabs.          (line   6)
* -d DIM,[MIN][,[MAX]]:                  ncwa netCDF Weighted Averager.
                                                              (line  34)
* -f:                                    Intrinsic mathematical methods.
                                                              (line 142)
* -F:                                    C and Fortran Index Conventions.
                                                              (line   6)
* -H:                                    ncks netCDF Kitchen Sink.
                                                              (line 135)
* -h:                                    ncatted netCDF Attribute Editor.
                                                              (line  23)
* -H:                                    File List Attributes.
                                                              (line   6)
* -h:                                    History Attribute.   (line   6)
* -I:                                    ncwa netCDF Weighted Averager.
                                                              (line  70)
* -L:                                    Deflation.           (line   6)
* -l OUTPUT-PATH:                        Remote storage.      (line   6)
* -m:                                    ncks netCDF Kitchen Sink.
                                                              (line 216)
* -M <1>:                                ncks netCDF Kitchen Sink.
                                                              (line 179)
* -M <2>:                                ncecat netCDF Ensemble Concatenator.
                                                              (line  41)
* -M:                                    Selecting Output File Format.
                                                              (line  88)
* -M CNK_MAP:                            Chunking.            (line  68)
* -m MASK_VAR:                           ncwa netCDF Weighted Averager.
                                                              (line  42)
* -M PCK_MAP:                            ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  75)
* -N:                                    Normalization and Integration.
                                                              (line   6)
* -n LOOP <1>:                           Specifying Input Files.
                                                              (line   6)
* -n LOOP:                               Large Numbers of Files.
                                                              (line   6)
* -O <1>:                                Batch Mode.          (line   6)
* -O:                                    Temporary Output Files.
                                                              (line  25)
* -o FL_OUT <1>:                         Specifying Output Files.
                                                              (line   6)
* -o FL_OUT:                             Large Numbers of Files.
                                                              (line  60)
* -P:                                    ncks netCDF Kitchen Sink.
                                                              (line 225)
* -p INPUT-PATH <1>:                     Remote storage.      (line  68)
* -p INPUT-PATH:                         Specifying Input Files.
                                                              (line   6)
* -P PCK_PLC:                            ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  28)
* -q:                                    ncks netCDF Kitchen Sink.
                                                              (line 237)
* -Q:                                    ncks netCDF Kitchen Sink.
                                                              (line 231)
* -r:                                    Operator Version.    (line   6)
* -R:                                    Retaining Retrieved Files.
                                                              (line   6)
* -r:                                    Help Requests and Bug Reports.
                                                              (line  46)
* -s:                                    ncks netCDF Kitchen Sink.
                                                              (line 245)
* -t THR_NBR <1>:                        OpenMP Threading.    (line   6)
* -t THR_NBR:                            Single and Multi-file Operators.
                                                              (line  49)
* -U:                                    ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  59)
* -u:                                    ncks netCDF Kitchen Sink.
                                                              (line 250)
* -u ULM_NM:                             ncecat netCDF Ensemble Concatenator.
                                                              (line  23)
* -v:                                    ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 184)
* -v VAR <1>:                            ncks netCDF Kitchen Sink.
                                                              (line 271)
* -v VAR:                                Subsetting Variables.
                                                              (line   6)
* -w WEIGHT:                             ncwa netCDF Weighted Averager.
                                                              (line  42)
* -w WGT1[,WGT2]:                        ncflint netCDF File Interpolator.
                                                              (line  30)
* -x:                                    ncks netCDF Kitchen Sink.
                                                              (line 271)
* -X:                                    Auxiliary Coordinates.
                                                              (line   6)
* -x:                                    Subsetting Variables.
                                                              (line   6)
* -X LON_MIN,LON_MAX,LAT_MIN,LAT_MAX:    Auxiliary Coordinates.
                                                              (line   6)
* -y OP_TYP <1>:                         ncbo netCDF Binary Operator.
                                                              (line  21)
* -y OP_TYP:                             Operation Types.     (line   6)
* . (wildcard character):                Subsetting Variables.
                                                              (line  50)
* .netrc:                                Remote storage.      (line   6)
* .rhosts:                               Remote storage.      (line   6)
* /:                                     ncbo netCDF Binary Operator.
                                                              (line  21)
* / (division):                          Intrinsic mathematical methods.
                                                              (line   7)
* /*...*/ (comment):                     Syntax of ncap2 statements.
                                                              (line  24)
* // (comment):                          Syntax of ncap2 statements.
                                                              (line  24)
* 0 (NUL):                               ncatted netCDF Attribute Editor.
                                                              (line 209)
* 32-bit offset file format:             Selecting Output File Format.
                                                              (line  88)
* 64-bit offset file format:             Selecting Output File Format.
                                                              (line  88)
* 64BIT files:                           Selecting Output File Format.
                                                              (line   6)
* ; (end of statement):                  Syntax of ncap2 statements.
                                                              (line  21)
* <arpa/nameser.h>:                      Windows Operating System.
                                                              (line  15)
* <resolv.h>:                            Windows Operating System.
                                                              (line  15)
* ? (filename expansion):                Subsetting Variables.
                                                              (line  50)
* ? (question mark):                     ncatted netCDF Attribute Editor.
                                                              (line 200)
* ? (wildcard character):                Subsetting Variables.
                                                              (line  59)
* @ (attribute):                         Syntax of ncap2 statements.
                                                              (line  34)
* [] (array delimiters):                 Syntax of ncap2 statements.
                                                              (line  12)
* \ (backslash):                         ncatted netCDF Attribute Editor.
                                                              (line 200)
* \" (protected double quote):           ncatted netCDF Attribute Editor.
                                                              (line 200)
* \' (protected end quote):              ncatted netCDF Attribute Editor.
                                                              (line 200)
* \? (protected question mark):          ncatted netCDF Attribute Editor.
                                                              (line 200)
* \\ (ASCII \, backslash):               ncatted netCDF Attribute Editor.
                                                              (line 195)
* \\ (protected backslash):              ncatted netCDF Attribute Editor.
                                                              (line 200)
* \a (ASCII BEL, bell):                  ncatted netCDF Attribute Editor.
                                                              (line 195)
* \b (ASCII BS, backspace):              ncatted netCDF Attribute Editor.
                                                              (line 195)
* \f (ASCII FF, formfeed):               ncatted netCDF Attribute Editor.
                                                              (line 195)
* \n (ASCII LF, linefeed):               ncatted netCDF Attribute Editor.
                                                              (line 185)
* \n (linefeed):                         ncks netCDF Kitchen Sink.
                                                              (line 282)
* \r (ASCII CR, carriage return):        ncatted netCDF Attribute Editor.
                                                              (line 195)
* \t (ASCII HT, horizontal tab):         ncatted netCDF Attribute Editor.
                                                              (line 185)
* \t (horizontal tab):                   ncks netCDF Kitchen Sink.
                                                              (line 282)
* \v (ASCII VT, vertical tab):           ncatted netCDF Attribute Editor.
                                                              (line 195)
* ^ (power):                             Intrinsic mathematical methods.
                                                              (line   7)
* ^ (wildcard character):                Subsetting Variables.
                                                              (line  50)
* _FillValue <1>:                        ncrename netCDF Renamer.
                                                              (line  92)
* _FillValue:                            ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 113)
* _FILLVALUE:                            ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 113)
* _FillValue <1>:                        ncflint netCDF File Interpolator.
                                                              (line  69)
* _FillValue <2>:                        ncatted netCDF Attribute Editor.
                                                              (line  28)
* _FillValue <3>:                        Packed data.         (line   6)
* _FillValue:                            Missing Values.      (line   6)
* `NCO User's Guide':                    Availability.        (line  14)
* `User's Guide':                        Availability.        (line  14)
* ABS:                                   Intrinsic mathematical methods.
                                                              (line  10)
* absolute value:                        Intrinsic mathematical methods.
                                                              (line  10)
* ACOS:                                  Intrinsic mathematical methods.
                                                              (line  10)
* ACOSH:                                 Intrinsic mathematical methods.
                                                              (line  10)
* add:                                   ncbo netCDF Binary Operator.
                                                              (line  21)
* add_offset <1>:                        ncrcat netCDF Record Concatenator.
                                                              (line  31)
* add_offset <2>:                        ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  21)
* add_offset <3>:                        ncecat netCDF Ensemble Concatenator.
                                                              (line  62)
* add_offset:                            Packed data.         (line   6)
* ADD_OFFSET:                            Performance.         (line  31)
* adding data <1>:                       ncflint netCDF File Interpolator.
                                                              (line   6)
* adding data:                           ncbo netCDF Binary Operator.
                                                              (line   6)
* addition <1>:                          ncflint netCDF File Interpolator.
                                                              (line   6)
* addition <2>:                          ncbo netCDF Binary Operator.
                                                              (line   6)
* addition:                              Intrinsic mathematical methods.
                                                              (line   7)
* Alexander Hansen:                      Contributors.        (line  74)
* alias <1>:                             ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  69)
* alias:                                 ncbo netCDF Binary Operator.
                                                              (line  65)
* all:                                   Chunking.            (line  36)
* alphabetization:                       ncks netCDF Kitchen Sink.
                                                              (line 102)
* alphabetize output:                    ncks netCDF Kitchen Sink.
                                                              (line 265)
* alternate invocations:                 ncbo netCDF Binary Operator.
                                                              (line  21)
* anomalies:                             ncbo netCDF Binary Operator.
                                                              (line 101)
* ANSI:                                  Compatability.       (line  35)
* ANSI C:                                Intrinsic mathematical methods.
                                                              (line 141)
* appending data <1>:                    ncks netCDF Kitchen Sink.
                                                              (line  49)
* appending data:                        Examples ncap2.      (line 115)
* appending to files <1>:                ncks netCDF Kitchen Sink.
                                                              (line 277)
* appending to files <2>:                Batch Mode.          (line   6)
* appending to files:                    Temporary Output Files.
                                                              (line  25)
* appending variables <1>:               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 184)
* appending variables:                   Appending Variables. (line   6)
* AR4:                                   ncea netCDF Ensemble Averager.
                                                              (line  29)
* arccosine function:                    Intrinsic mathematical methods.
                                                              (line  10)
* arcsine function:                      Intrinsic mathematical methods.
                                                              (line  10)
* arctangent function:                   Intrinsic mathematical methods.
                                                              (line  10)
* area:                                  CF Conventions.      (line   6)
* arithmetic operators <1>:              ncwa netCDF Weighted Averager.
                                                              (line  34)
* arithmetic operators:                  Missing Values.      (line  12)
* arithmetic processor:                  ncap2 netCDF Arithmetic Processor.
                                                              (line   6)
* ARM conventions <1>:                   ncrcat netCDF Record Concatenator.
                                                              (line  44)
* ARM conventions:                       ARM Conventions.     (line   6)
* array indexing:                        Syntax of ncap2 statements.
                                                              (line  15)
* array storage:                         Syntax of ncap2 statements.
                                                              (line  18)
* array syntax:                          Syntax of ncap2 statements.
                                                              (line  12)
* arrival value:                         ncflint netCDF File Interpolator.
                                                              (line  44)
* ASCII:                                 ncatted netCDF Attribute Editor.
                                                              (line 183)
* ASIN:                                  Intrinsic mathematical methods.
                                                              (line  10)
* ASINH:                                 Intrinsic mathematical methods.
                                                              (line  10)
* assignment statement:                  Syntax of ncap2 statements.
                                                              (line  21)
* asynchronous file access:              Remote storage.      (line   6)
* ATAN:                                  Intrinsic mathematical methods.
                                                              (line  10)
* ATANH:                                 Intrinsic mathematical methods.
                                                              (line  10)
* attribute inheritance:                 Attributes.          (line  43)
* attribute names <1>:                   ncrename netCDF Renamer.
                                                              (line   6)
* attribute names:                       ncatted netCDF Attribute Editor.
                                                              (line   6)
* attribute propagation:                 Attributes.          (line  43)
* attribute syntax:                      Syntax of ncap2 statements.
                                                              (line  34)
* attribute, units:                      UDUnits Support.     (line   6)
* attributes:                            ncatted netCDF Attribute Editor.
                                                              (line   6)
* attributes, appending:                 ncatted netCDF Attribute Editor.
                                                              (line  88)
* attributes, creating:                  ncatted netCDF Attribute Editor.
                                                              (line  88)
* attributes, deleting:                  ncatted netCDF Attribute Editor.
                                                              (line  88)
* attributes, editing:                   ncatted netCDF Attribute Editor.
                                                              (line  88)
* attributes, global <1>:                ncrename netCDF Renamer.
                                                              (line  51)
* attributes, global <2>:                ncks netCDF Kitchen Sink.
                                                              (line  35)
* attributes, global <3>:                ncatted netCDF Attribute Editor.
                                                              (line  72)
* attributes, global <4>:                ARM Conventions.     (line  30)
* attributes, global <5>:                File List Attributes.
                                                              (line   6)
* attributes, global <6>:                History Attribute.   (line   6)
* attributes, global:                    Large Numbers of Files.
                                                              (line  34)
* attributes, modifying:                 ncatted netCDF Attribute Editor.
                                                              (line  88)
* attributes, overwriting:               ncatted netCDF Attribute Editor.
                                                              (line  88)
* attributesncap:                        Attributes.          (line   6)
* autoconf:                              Help Requests and Bug Reports.
                                                              (line  69)
* automagic <1>:                         Large Numbers of Files.
                                                              (line   7)
* automagic:                             Compatability.       (line  74)
* automatic type conversion <1>:         Intrinsic mathematical methods.
                                                              (line 100)
* automatic type conversion:             Type Conversion.     (line   8)
* auxiliary coordinates:                 CF Conventions.      (line  57)
* average <1>:                           ncwa netCDF Weighted Averager.
                                                              (line  79)
* average:                               Operation Types.     (line   6)
* averaging data <1>:                    ncwa netCDF Weighted Averager.
                                                              (line   6)
* averaging data <2>:                    ncra netCDF Record Averager.
                                                              (line   6)
* averaging data <3>:                    ncea netCDF Ensemble Averager.
                                                              (line   6)
* averaging data:                        Missing Values.      (line   6)
* avg:                                   Operation Types.     (line   6)
* avg():                                 Methods and functions.
                                                              (line  29)
* avgsqr:                                Operation Types.     (line   6)
* Barry deFreese:                        Contributors.        (line  62)
* base_time:                             ARM Conventions.     (line   6)
* bash:                                  Subsetting Variables.
                                                              (line 102)
* Bash Shell:                            ncbo netCDF Binary Operator.
                                                              (line 183)
* Bash shell:                            ncbo netCDF Binary Operator.
                                                              (line  50)
* batch mode:                            Batch Mode.          (line   6)
* benchmarks:                            OpenMP Threading.    (line  51)
* Bessel function:                       GSL special functions.
                                                              (line  35)
* Bill Kocik:                            Contributors.        (line  35)
* binary format:                         ncks netCDF Kitchen Sink.
                                                              (line 112)
* binary operations <1>:                 ncbo netCDF Binary Operator.
                                                              (line   6)
* binary operations:                     Memory for ncap2.    (line   6)
* binary Operators:                      Expressions.         (line  94)
* Bourne Shell <1>:                      ncbo netCDF Binary Operator.
                                                              (line 183)
* Bourne Shell:                          Stride.              (line  43)
* Brian Mays:                            Contributors.        (line  29)
* broadcasting variables <1>:            ncwa netCDF Weighted Averager.
                                                              (line   6)
* broadcasting variables <2>:            ncflint netCDF File Interpolator.
                                                              (line 131)
* broadcasting variables:                ncbo netCDF Binary Operator.
                                                              (line  95)
* BSD:                                   Command Line Options.
                                                              (line  21)
* buffering:                             Performance.         (line  21)
* bugs, reporting:                       Help Requests and Bug Reports.
                                                              (line   6)
* byte():                                Methods and functions.
                                                              (line 142)
* C index convention:                    C and Fortran Index Conventions.
                                                              (line   6)
* C language <1>:                        ncks netCDF Kitchen Sink.
                                                              (line 245)
* C language <2>:                        ncatted netCDF Attribute Editor.
                                                              (line 209)
* C language <3>:                        Expressions.         (line   7)
* C language <4>:                        Syntax of ncap2 statements.
                                                              (line   8)
* C language <5>:                        Automatic type conversion.
                                                              (line  16)
* C language <6>:                        Missing Values.      (line  54)
* C language:                            Compatability.       (line  56)
* C Shell <1>:                           ncbo netCDF Binary Operator.
                                                              (line 183)
* C Shell:                               Stride.              (line  43)
* C++:                                   Compatability.       (line  27)
* c++:                                   Compatability.       (line  22)
* C89:                                   Compatability.       (line  35)
* C99:                                   Compatability.       (line  39)
* C_FORMAT:                              Performance.         (line  31)
* cc:                                    Compatability.       (line  22)
* CC:                                    Compatability.       (line  22)
* CCM Processor <1>:                     ncrcat netCDF Record Concatenator.
                                                              (line  50)
* CCM Processor <2>:                     ncra netCDF Record Averager.
                                                              (line  42)
* CCM Processor:                         Specifying Input Files.
                                                              (line   6)
* CCSM <1>:                              CCSM Example.        (line   6)
* CCSM:                                  Proposals for Institutional Funding.
                                                              (line   6)
* CCSM conventions:                      CF Conventions.      (line   6)
* CEIL:                                  Intrinsic mathematical methods.
                                                              (line  10)
* ceiling function:                      Intrinsic mathematical methods.
                                                              (line  10)
* cell-based grids:                      Auxiliary Coordinates.
                                                              (line  23)
* CF conventions <1>:                    ncbo netCDF Binary Operator.
                                                              (line 127)
* CF conventions <2>:                    CF Conventions.      (line   6)
* CF conventions <3>:                    UDUnits Support.     (line  90)
* CF conventions <4>:                    Auxiliary Coordinates.
                                                              (line   6)
* CF conventions:                        Subsetting Coordinate Variables.
                                                              (line  22)
* change_miss():                         Missing values ncap2.
                                                              (line  42)
* char():                                Methods and functions.
                                                              (line 145)
* characters, special:                   ncatted netCDF Attribute Editor.
                                                              (line 185)
* Charlie Zender <1>:                    Contributors.        (line   7)
* Charlie Zender:                        Foreword.            (line   6)
* chocolate:                             Contributing.        (line  23)
* chunking <1>:                          Chunking.            (line   6)
* chunking:                              netCDF2/3/4 and HDF4/5 Support.
                                                              (line  73)
* chunking map:                          Chunking.            (line  21)
* chunking policy:                       Chunking.            (line  21)
* chunksize:                             Chunking.            (line  21)
* CLASSIC files:                         Selecting Output File Format.
                                                              (line   6)
* client-server:                         OPeNDAP.             (line   6)
* Climate and Forecast Metadata Convention: UDUnits Support.  (line  90)
* climate model <1>:                     Normalization and Integration.
                                                              (line  70)
* climate model <2>:                     ncecat netCDF Ensemble Concatenator.
                                                              (line  52)
* climate model <3>:                     Specifying Input Files.
                                                              (line  65)
* climate model <4>:                     Concatenation.       (line  19)
* climate model <5>:                     Climate Model Paradigm.
                                                              (line   6)
* climate model:                         Philosophy.          (line   6)
* clipping operators:                    Expressions.         (line 174)
* CMIP:                                  ncea netCDF Ensemble Averager.
                                                              (line  29)
* cnk_all:                               Chunking.            (line  36)
* cnk_dmn:                               Chunking.            (line  74)
* cnk_g2d:                               Chunking.            (line  36)
* cnk_g3d:                               Chunking.            (line  36)
* CNK_MAP:                               Chunking.            (line  68)
* cnk_prd:                               Chunking.            (line  74)
* cnk_rd1:                               Chunking.            (line  74)
* cnk_scl:                               Chunking.            (line  74)
* cnk_xpl:                               Chunking.            (line  36)
* Comeau:                                Compatability.       (line   6)
* command line options:                  Command Line Options.
                                                              (line   6)
* command line switches <1>:             Operator Reference Manual.
                                                              (line   7)
* command line switches <2>:             Specifying Output Files.
                                                              (line   6)
* command line switches <3>:             Common features.     (line   9)
* command line switches:                 Philosophy.          (line  22)
* comments:                              Syntax of ncap2 statements.
                                                              (line  24)
* como:                                  Compatability.       (line  22)
* Compaq:                                Compatability.       (line   6)
* comparator:                            Mask condition.      (line  14)
* compatability:                         Compatability.       (line   6)
* compilers:                             Specifying Output Files.
                                                              (line  28)
* complementary error function:          Intrinsic mathematical methods.
                                                              (line  10)
* compression <1>:                       ncks netCDF Kitchen Sink.
                                                              (line 219)
* compression:                           Deflation.           (line   6)
* concatenation <1>:                     ncrcat netCDF Record Concatenator.
                                                              (line   6)
* concatenation <2>:                     ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 143)
* concatenation <3>:                     ncecat netCDF Ensemble Concatenator.
                                                              (line   6)
* concatenation:                         Appending Variables. (line   6)
* conditional Operator:                  Expressions.         (line 163)
* config.guess:                          Help Requests and Bug Reports.
                                                              (line  69)
* configure.eg:                          Help Requests and Bug Reports.
                                                              (line  69)
* constraint expressions:                OPeNDAP.             (line 100)
* contributing:                          Contributing.        (line   6)
* contributors:                          Contributors.        (line   6)
* coordinate limits:                     Hyperslabs.          (line   6)
* coordinate variable <1>:               ncwa netCDF Weighted Averager.
                                                              (line  70)
* coordinate variable <2>:               ncbo netCDF Binary Operator.
                                                              (line 124)
* coordinate variable <3>:               CF Conventions.      (line  57)
* coordinate variable <4>:               Operation Types.     (line  38)
* coordinate variable:                   UDUnits Support.     (line  41)
* coordinate variables:                  ncrename netCDF Renamer.
                                                              (line  86)
* coordinates <1>:                       CF Conventions.      (line  57)
* coordinates:                           Auxiliary Coordinates.
                                                              (line   6)
* coordinates convention:                CF Conventions.      (line  57)
* core dump <1>:                         ncks netCDF Kitchen Sink.
                                                              (line 314)
* core dump <2>:                         Large Datasets.      (line  27)
* core dump:                             Help Requests and Bug Reports.
                                                              (line   6)
* COS:                                   Intrinsic mathematical methods.
                                                              (line  10)
* COSH:                                  Intrinsic mathematical methods.
                                                              (line  10)
* cosine function:                       Intrinsic mathematical methods.
                                                              (line  10)
* covariance:                            Examples ncap2.      (line  64)
* Cray <1>:                              Large Datasets.      (line  23)
* Cray:                                  Compatability.       (line   6)
* csh:                                   Subsetting Variables.
                                                              (line 102)
* cxx:                                   Compatability.       (line  22)
* Cygwin:                                Windows Operating System.
                                                              (line  11)
* Daniel Baumann:                        Contributors.        (line  62)
* Daniel Wang:                           Contributors.        (line  23)
* DAP:                                   OPeNDAP.             (line   6)
* data access protocol:                  OPeNDAP.             (line   6)
* data safety <1>:                       ncrename netCDF Renamer.
                                                              (line  27)
* data safety:                           Temporary Output Files.
                                                              (line   6)
* data, missing <1>:                     ncatted netCDF Attribute Editor.
                                                              (line  28)
* data, missing:                         Missing Values.      (line   6)
* date:                                  CF Conventions.      (line   6)
* datesec:                               CF Conventions.      (line   6)
* DBG_LVL <1>:                           OpenMP Threading.    (line  40)
* DBG_LVL <2>:                           Large Datasets.      (line  37)
* DBG_LVL:                               Help Requests and Bug Reports.
                                                              (line  61)
* DDRA:                                  Proposals for Institutional Funding.
                                                              (line   6)
* Debian:                                netCDF2/3/4 and HDF4/5 Support.
                                                              (line  83)
* DEBUG-LEVEL <1>:                       Large Datasets.      (line  37)
* DEBUG-LEVEL:                           Help Requests and Bug Reports.
                                                              (line  61)
* debugging <1>:                         OpenMP Threading.    (line  40)
* debugging <2>:                         Large Datasets.      (line  37)
* debugging:                             Help Requests and Bug Reports.
                                                              (line  46)
* DEC:                                   Compatability.       (line   6)
* defdim():                              Dimensions.          (line   6)
* deflation <1>:                         ncks netCDF Kitchen Sink.
                                                              (line 219)
* deflation <2>:                         Deflation.           (line   6)
* deflation:                             netCDF2/3/4 and HDF4/5 Support.
                                                              (line  69)
* degenerate dimension <1>:              Normalization and Integration.
                                                              (line  61)
* degenerate dimension <2>:              ncwa netCDF Weighted Averager.
                                                              (line  23)
* degenerate dimension <3>:              ncra netCDF Record Averager.
                                                              (line  16)
* degenerate dimension <4>:              ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 263)
* degenerate dimension <5>:              ncflint netCDF File Interpolator.
                                                              (line  58)
* degenerate dimension <6>:              ncecat netCDF Ensemble Concatenator.
                                                              (line 103)
* degenerate dimension <7>:              ncbo netCDF Binary Operator.
                                                              (line 118)
* degenerate dimension <8>:              Examples ncap2.      (line 115)
* degenerate dimension:                  Operation Types.     (line  83)
* delete_miss():                         Missing values ncap2.
                                                              (line  52)
* demotion:                              Type Conversion.     (line   8)
* derived fields:                        ncap2 netCDF Arithmetic Processor.
                                                              (line  30)
* Digital:                               Compatability.       (line   6)
* dimension limits:                      Hyperslabs.          (line   6)
* dimension names:                       ncrename netCDF Renamer.
                                                              (line   6)
* dimensions, growing:                   Examples ncap2.      (line  34)
* dimensionsncap:                        Dimensions.          (line   6)
* disjoint files:                        Appending Variables. (line  29)
* Distributed Data Reduction & Analysis: Proposals for Institutional Funding.
                                                              (line   6)
* Distributed Oceanographic Data System: OPeNDAP.             (line   6)
* divide:                                ncbo netCDF Binary Operator.
                                                              (line  21)
* dividing data:                         ncbo netCDF Binary Operator.
                                                              (line   6)
* division:                              Intrinsic mathematical methods.
                                                              (line   7)
* dmn:                                   Chunking.            (line  74)
* documentation:                         Availability.        (line  14)
* DODS <1>:                              Retaining Retrieved Files.
                                                              (line  35)
* DODS:                                  OPeNDAP.             (line   6)
* DODS_ROOT:                             OPeNDAP.             (line   6)
* dot product:                           Normalization and Integration.
                                                              (line   6)
* double precision:                      Intrinsic mathematical methods.
                                                              (line 141)
* double():                              Methods and functions.
                                                              (line 157)
* dynamic linking:                       Libraries.           (line   6)
* Ed Hill:                               Contributors.        (line  65)
* eddy covariance:                       Examples ncap2.      (line  73)
* editing attributes:                    ncatted netCDF Attribute Editor.
                                                              (line   6)
* egrep:                                 Subsetting Variables.
                                                              (line  33)
* Elliptic integrals:                    GSL special functions.
                                                              (line  55)
* ensemble <1>:                          ncea netCDF Ensemble Averager.
                                                              (line  17)
* ensemble:                              Concatenation.       (line  19)
* ensemble average:                      ncea netCDF Ensemble Averager.
                                                              (line   6)
* ensemble concatenation:                ncecat netCDF Ensemble Concatenator.
                                                              (line   6)
* ERF:                                   Intrinsic mathematical methods.
                                                              (line  10)
* ERFC:                                  Intrinsic mathematical methods.
                                                              (line  10)
* error function:                        Intrinsic mathematical methods.
                                                              (line  10)
* error tolerance:                       Temporary Output Files.
                                                              (line   6)
* exclusion <1>:                         ncks netCDF Kitchen Sink.
                                                              (line 271)
* exclusion:                             Subsetting Variables.
                                                              (line   6)
* execution time <1>:                    ncrename netCDF Renamer.
                                                              (line  42)
* execution time <2>:                    Missing Values.      (line  64)
* execution time <3>:                    Metadata Optimization.
                                                              (line   6)
* execution time <4>:                    Performance.         (line  22)
* execution time <5>:                    Temporary Output Files.
                                                              (line  19)
* execution time:                        Libraries.           (line   7)
* EXP:                                   Intrinsic mathematical methods.
                                                              (line  10)
* exponentiation:                        Intrinsic mathematical methods.
                                                              (line   7)
* exponentiation function:               Intrinsic mathematical methods.
                                                              (line  10)
* expressions:                           Expressions.         (line   3)
* extended regular expressions <1>:      ncatted netCDF Attribute Editor.
                                                              (line  49)
* extended regular expressions <2>:      Examples ncap2.      (line  92)
* extended regular expressions <3>:      Subsetting Variables.
                                                              (line  33)
* extended regular expressions:          Large Numbers of Files.
                                                              (line  42)
* extraction <1>:                        ncks netCDF Kitchen Sink.
                                                              (line 271)
* extraction:                            Subsetting Variables.
                                                              (line   6)
* f90:                                   Windows Operating System.
                                                              (line  11)
* features, requesting:                  Help Requests and Bug Reports.
                                                              (line   6)
* file deletion:                         Retaining Retrieved Files.
                                                              (line   6)
* file removal:                          Retaining Retrieved Files.
                                                              (line   6)
* file retention:                        Retaining Retrieved Files.
                                                              (line   6)
* files, multiple:                       Specifying Input Files.
                                                              (line  36)
* files, numerous input:                 Large Numbers of Files.
                                                              (line   6)
* Filipe Fernandes:                      Contributors.        (line  71)
* fixed dimension:                       ncks netCDF Kitchen Sink.
                                                              (line 128)
* flags:                                 Examples ncap2.      (line  49)
* float:                                 Intrinsic mathematical methods.
                                                              (line 141)
* float():                               Methods and functions.
                                                              (line 154)
* FLOOR:                                 Intrinsic mathematical methods.
                                                              (line  10)
* floor:                                 Automatic type conversion.
                                                              (line  63)
* floor function:                        Intrinsic mathematical methods.
                                                              (line  10)
* flt_byt:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* flt_sht:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* for():                                 Loops.               (line   6)
* force append:                          Batch Mode.          (line   6)
* force overwrite:                       Batch Mode.          (line   6)
* foreword:                              Foreword.            (line   6)
* Fortran <1>:                           ncrcat netCDF Record Concatenator.
                                                              (line  58)
* Fortran <2>:                           ncra netCDF Record Averager.
                                                              (line  50)
* Fortran:                               Automatic type conversion.
                                                              (line  16)
* Fortran index convention:              C and Fortran Index Conventions.
                                                              (line   6)
* FORTRAN_FORMAT:                        Performance.         (line  31)
* Francesco Lovergine:                   Contributors.        (line  62)
* FTP:                                   Retaining Retrieved Files.
                                                              (line  24)
* ftp <1>:                               Remote storage.      (line   6)
* ftp:                                   Windows Operating System.
                                                              (line  17)
* funding:                               Proposals for Institutional Funding.
                                                              (line   6)
* g++:                                   Windows Operating System.
                                                              (line  30)
* g2d:                                   Chunking.            (line  36)
* g3d:                                   Chunking.            (line  36)
* g77:                                   Windows Operating System.
                                                              (line  30)
* GAMMA <1>:                             Intrinsic mathematical methods.
                                                              (line  10)
* GAMMA:                                 Compatability.       (line  72)
* gamma function <1>:                    Intrinsic mathematical methods.
                                                              (line  10)
* gamma function:                        GSL special functions.
                                                              (line  21)
* Gaussian weights:                      Normalization and Integration.
                                                              (line  70)
* Gayathri Venkitachalam:                Contributors.        (line  50)
* gcc <1>:                               Windows Operating System.
                                                              (line  30)
* gcc:                                   Compatability.       (line  22)
* GCM:                                   Climate Model Paradigm.
                                                              (line   6)
* George Shapavalov:                     Contributors.        (line  68)
* George Shapovalov:                     Contributors.        (line  32)
* get_miss():                            Missing values ncap2.
                                                              (line  46)
* gethostname:                           Windows Operating System.
                                                              (line  15)
* getopt:                                Command Line Options.
                                                              (line  21)
* getopt.h:                              Command Line Options.
                                                              (line  21)
* getopt_long:                           Command Line Options.
                                                              (line  21)
* getuid:                                Windows Operating System.
                                                              (line  15)
* global attributes <1>:                 ncrename netCDF Renamer.
                                                              (line  51)
* global attributes <2>:                 ncks netCDF Kitchen Sink.
                                                              (line  35)
* global attributes <3>:                 ncatted netCDF Attribute Editor.
                                                              (line  72)
* global attributes <4>:                 ARM Conventions.     (line  30)
* global attributes <5>:                 File List Attributes.
                                                              (line   6)
* global attributes <6>:                 History Attribute.   (line   6)
* global attributes:                     Large Numbers of Files.
                                                              (line  34)
* globbing <1>:                          ncrcat netCDF Record Concatenator.
                                                              (line  50)
* globbing <2>:                          ncra netCDF Record Averager.
                                                              (line  42)
* globbing <3>:                          ncbo netCDF Binary Operator.
                                                              (line  51)
* globbing <4>:                          Examples ncap2.      (line  92)
* globbing <5>:                          Subsetting Variables.
                                                              (line 102)
* globbing <6>:                          Specifying Input Files.
                                                              (line   6)
* globbing:                              Large Numbers of Files.
                                                              (line  42)
* GNU <1>:                               Subsetting Variables.
                                                              (line  33)
* GNU:                                   Command Line Options.
                                                              (line   7)
* gnu-win32:                             Windows Operating System.
                                                              (line  11)
* GNU/Linux:                             Large Datasets.      (line  27)
* GNUmakefile:                           Windows Operating System.
                                                              (line  11)
* God:                                   UDUnits Support.     (line 127)
* growing dimensions:                    Examples ncap2.      (line  34)
* GSL <1>:                               GSL interpolation.   (line   6)
* GSL <2>:                               GSL special functions.
                                                              (line   6)
* GSL:                                   Compatability.       (line  65)
* GSL_SF_BESSEL_JN:                      GSL special functions.
                                                              (line  35)
* GSL_SF_GAMMA:                          GSL special functions.
                                                              (line  21)
* gsl_sf_legendre_Pl:                    GSL special functions.
                                                              (line  93)
* gw <1>:                                Normalization and Integration.
                                                              (line  70)
* gw:                                    CF Conventions.      (line   6)
* Harry Mangalam:                        Contributors.        (line  26)
* HDF <1>:                               Proposals for Institutional Funding.
                                                              (line  13)
* HDF <2>:                               Selecting Output File Format.
                                                              (line   6)
* HDF:                                   netCDF2/3/4 and HDF4/5 Support.
                                                              (line  16)
* HDF5:                                  netCDF2/3/4 and HDF4/5 Support.
                                                              (line  38)
* help:                                  Help Requests and Bug Reports.
                                                              (line   6)
* Henry Butowsky:                        Contributors.        (line  12)
* hgh_byt:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* hgh_sht:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* Hierarchical Data Format:              netCDF2/3/4 and HDF4/5 Support.
                                                              (line  16)
* history <1>:                           ncks netCDF Kitchen Sink.
                                                              (line 263)
* history <2>:                           ncatted netCDF Attribute Editor.
                                                              (line  23)
* history <3>:                           ARM Conventions.     (line  30)
* history <4>:                           History Attribute.   (line   6)
* history <5>:                           Remote storage.      (line   6)
* history:                               Large Numbers of Files.
                                                              (line  87)
* HP:                                    Compatability.       (line   6)
* HTML:                                  Availability.        (line  14)
* HTTP protocol:                         OPeNDAP.             (line   6)
* hyai:                                  CF Conventions.      (line   6)
* hyam:                                  CF Conventions.      (line   6)
* hybi:                                  CF Conventions.      (line   6)
* hybm:                                  CF Conventions.      (line   6)
* hybrid coordinate system:              Left hand casting.   (line   6)
* hyperbolic arccosine function:         Intrinsic mathematical methods.
                                                              (line  10)
* hyperbolic arcsine function:           Intrinsic mathematical methods.
                                                              (line  10)
* hyperbolic arctangent function:        Intrinsic mathematical methods.
                                                              (line  10)
* hyperbolic cosine function:            Intrinsic mathematical methods.
                                                              (line  10)
* hyperbolic sine function:              Intrinsic mathematical methods.
                                                              (line  10)
* hyperbolic tangent:                    Intrinsic mathematical methods.
                                                              (line  10)
* hyperslab <1>:                         ncwa netCDF Weighted Averager.
                                                              (line  34)
* hyperslab <2>:                         ncrcat netCDF Record Concatenator.
                                                              (line  26)
* hyperslab <3>:                         ncra netCDF Record Averager.
                                                              (line  26)
* hyperslab <4>:                         ncecat netCDF Ensemble Concatenator.
                                                              (line  28)
* hyperslab <5>:                         ncea netCDF Ensemble Averager.
                                                              (line  23)
* hyperslab <6>:                         Chunking.            (line  25)
* hyperslab:                             Hyperslabs.          (line   6)
* hyperslabs:                            Arrays and hyperslabs.
                                                              (line   6)
* I/O <1>:                               Multislabs.          (line  47)
* I/O <2>:                               C and Fortran Index Conventions.
                                                              (line  10)
* I/O:                                   OPeNDAP.             (line  67)
* I18N:                                  Internationalization.
                                                              (line   6)
* IBM:                                   Compatability.       (line   6)
* icc:                                   Compatability.       (line  22)
* ID Quoting:                            ID Quoting.          (line   6)
* IDL:                                   Philosophy.          (line  15)
* if():                                  if statement.        (line   6)
* ilimit:                                Large Datasets.      (line  26)
* include ncap:                          Include files.       (line   6)
* including files:                       Syntax of ncap2 statements.
                                                              (line  28)
* index convention:                      C and Fortran Index Conventions.
                                                              (line   6)
* inexact conversion:                    Intrinsic mathematical methods.
                                                              (line  96)
* Info:                                  Availability.        (line  14)
* input files <1>:                       Specifying Output Files.
                                                              (line   6)
* input files <2>:                       Specifying Input Files.
                                                              (line   6)
* input files:                           Large Numbers of Files.
                                                              (line  60)
* INPUT-PATH <1>:                        Remote storage.      (line  68)
* INPUT-PATH:                            Specifying Input Files.
                                                              (line   6)
* installation <1>:                      Help Requests and Bug Reports.
                                                              (line  69)
* installation:                          Compatability.       (line   6)
* int():                                 Methods and functions.
                                                              (line 151)
* int64():                               Methods and functions.
                                                              (line 174)
* integration:                           Normalization and Integration.
                                                              (line   6)
* Intel:                                 Compatability.       (line   6)
* Internationalization:                  Internationalization.
                                                              (line   6)
* interpolation:                         ncflint netCDF File Interpolator.
                                                              (line   6)
* introduction:                          Introduction.        (line   6)
* IPCC <1>:                              Proposals for Institutional Funding.
                                                              (line   6)
* IPCC <2>:                              ncecat netCDF Ensemble Concatenator.
                                                              (line  30)
* IPCC:                                  ncea netCDF Ensemble Averager.
                                                              (line  29)
* irregular grids:                       Irregular grids.     (line   6)
* ISO:                                   Compatability.       (line  27)
* Jim Edwards:                           Contributors.        (line  41)
* Juliana Rew:                           Contributors.        (line  44)
* Karen Schuchardt:                      Contributors.        (line  47)
* Keith Lindsay:                         Contributors.        (line  56)
* kitchen sink:                          ncks netCDF Kitchen Sink.
                                                              (line   6)
* L10N:                                  Internationalization.
                                                              (line   7)
* large datasets <1>:                    OpenMP Threading.    (line  18)
* large datasets:                        Large Datasets.      (line   6)
* Large File Support <1>:                Large File Support.  (line   6)
* Large File Support:                    Large Datasets.      (line   6)
* lat_bnds:                              CF Conventions.      (line   6)
* LD_LIBRARY_PATH:                       Libraries.           (line   6)
* left hand casting <1>:                 Left hand casting.   (line   6)
* left hand casting:                     Memory for ncap2.    (line   6)
* Legendre polynomial:                   GSL special functions.
                                                              (line  93)
* Lempel-Ziv deflation:                  Deflation.           (line   6)
* Len Makin:                             Contributors.        (line  38)
* lexer:                                 ncap2 netCDF Arithmetic Processor.
                                                              (line   6)
* LFS <1>:                               Large File Support.  (line   6)
* LFS:                                   Large Datasets.      (line   6)
* LHS:                                   Left hand casting.   (line   6)
* libnco:                                Compatability.       (line  27)
* libraries:                             Libraries.           (line   6)
* linkers:                               Specifying Output Files.
                                                              (line  28)
* Linux:                                 Intrinsic mathematical methods.
                                                              (line 143)
* LN:                                    Intrinsic mathematical methods.
                                                              (line  10)
* ln -s <1>:                             ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  69)
* ln -s:                                 ncbo netCDF Binary Operator.
                                                              (line  65)
* LOG:                                   Intrinsic mathematical methods.
                                                              (line  10)
* LOG10:                                 Intrinsic mathematical methods.
                                                              (line  10)
* logarithm, base 10:                    Intrinsic mathematical methods.
                                                              (line  10)
* logarithm, natural:                    Intrinsic mathematical methods.
                                                              (line  10)
* lon_bnds:                              CF Conventions.      (line   6)
* long double:                           Intrinsic mathematical methods.
                                                              (line 141)
* long options <1>:                      ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 208)
* long options:                          Command Line Options.
                                                              (line  20)
* longitude:                             Wrapped Coordinates. (line   6)
* Macintosh:                             Compatability.       (line   6)
* Makefile <1>:                          OPeNDAP.             (line  19)
* Makefile <2>:                          netCDF2/3/4 and HDF4/5 Support.
                                                              (line  31)
* Makefile <3>:                          Windows Operating System.
                                                              (line  11)
* Makefile:                              Compatability.       (line  32)
* malloc():                              Memory for ncap2.    (line  15)
* manual type conversion:                Type Conversion.     (line   8)
* map_dmn:                               Chunking.            (line  74)
* map_prd:                               Chunking.            (line  74)
* map_rd1:                               Chunking.            (line  74)
* map_scl:                               Chunking.            (line  74)
* Mark Flanner:                          Contributors.        (line  56)
* Markus Liebig:                         Contributors.        (line  59)
* Martin Dix:                            Contributors.        (line  56)
* Martin Schmidt:                        Contributors.        (line  56)
* mask <1>:                              Examples ncap2.      (line  57)
* mask:                                  Irregular grids.     (line   6)
* mask condition <1>:                    Normalization and Integration.
                                                              (line 115)
* mask condition:                        Mask condition.      (line   6)
* masked average:                        ncwa netCDF Weighted Averager.
                                                              (line   6)
* Mass Store System:                     Remote storage.      (line   6)
* Matej Vela:                            Contributors.        (line  62)
* mathematical functions:                Intrinsic mathematical methods.
                                                              (line  10)
* max:                                   Operation Types.     (line   6)
* max():                                 Methods and functions.
                                                              (line  38)
* maximum:                               Operation Types.     (line   6)
* mean:                                  Operation Types.     (line   6)
* memory available:                      Memory Requirements. (line   6)
* memory leaks:                          Memory for ncap2.    (line   6)
* memory requirements <1>:               Subsetting Variables.
                                                              (line  22)
* memory requirements:                   Memory Requirements. (line   6)
* merging files <1>:                     ncks netCDF Kitchen Sink.
                                                              (line  49)
* merging files:                         Appending Variables. (line   6)
* metadata:                              ncks netCDF Kitchen Sink.
                                                              (line 216)
* metadata optimization:                 Metadata Optimization.
                                                              (line   6)
* metadata, global <1>:                  ncks netCDF Kitchen Sink.
                                                              (line 179)
* metadata, global:                      ncecat netCDF Ensemble Concatenator.
                                                              (line  41)
* Michael Schulz:                        Contributors.        (line  56)
* Microsoft <1>:                         Windows Operating System.
                                                              (line   6)
* Microsoft:                             Compatability.       (line   6)
* Mike Folk:                             netCDF2/3/4 and HDF4/5 Support.
                                                              (line  16)
* Mike Page:                             Contributors.        (line  56)
* min:                                   Operation Types.     (line   6)
* min():                                 Methods and functions.
                                                              (line  41)
* minimum:                               Operation Types.     (line   6)
* missing values <1>:                    ncflint netCDF File Interpolator.
                                                              (line  69)
* missing values <2>:                    ncatted netCDF Attribute Editor.
                                                              (line  28)
* missing values:                        Missing Values.      (line   6)
* missing values ncap2:                  Missing values ncap2.
                                                              (line   6)
* missing_value <1>:                     ncrename netCDF Renamer.
                                                              (line  92)
* missing_value <2>:                     Packed data.         (line   6)
* missing_value:                         Missing Values.      (line   6)
* MKS units:                             UDUnits Support.     (line  20)
* modulus:                               Intrinsic mathematical methods.
                                                              (line   7)
* monotonic coordinates:                 Performance.         (line  26)
* MSA:                                   Multislabs.          (line   6)
* msk_*:                                 CF Conventions.      (line   6)
* msrcp <1>:                             Retaining Retrieved Files.
                                                              (line  24)
* msrcp:                                 Remote storage.      (line  43)
* msread:                                Remote storage.      (line  43)
* MSS:                                   Remote storage.      (line   6)
* multi-file operators <1>:              ncrcat netCDF Record Concatenator.
                                                              (line  19)
* multi-file operators <2>:              ncra netCDF Record Averager.
                                                              (line  19)
* multi-file operators <3>:              ncecat netCDF Ensemble Concatenator.
                                                              (line  37)
* multi-file operators <4>:              ncea netCDF Ensemble Averager.
                                                              (line  38)
* multi-file operators <5>:              Specifying Output Files.
                                                              (line  18)
* multi-file operators <6>:              Specifying Input Files.
                                                              (line  36)
* multi-file operators:                  Single and Multi-file Operators.
                                                              (line   6)
* multi-hyperslab:                       Multislabs.          (line   6)
* multiplication <1>:                    ncbo netCDF Binary Operator.
                                                              (line   6)
* multiplication:                        Intrinsic mathematical methods.
                                                              (line   7)
* multiply:                              ncbo netCDF Binary Operator.
                                                              (line  21)
* multiplying data <1>:                  ncflint netCDF File Interpolator.
                                                              (line   6)
* multiplying data:                      ncbo netCDF Binary Operator.
                                                              (line   6)
* multislab:                             Multislabs.          (line   6)
* naked characters:                      ncbo netCDF Binary Operator.
                                                              (line  50)
* NASA:                                  Proposals for Institutional Funding.
                                                              (line  13)
* NASA EOSDIS:                           Large Numbers of Files.
                                                              (line   7)
* National Virtual Ocean Data System:    OPeNDAP.             (line  77)
* nc__enddef():                          Metadata Optimization.
                                                              (line   6)
* NC_BYTE <1>:                           ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* NC_BYTE <2>:                           ncbo netCDF Binary Operator.
                                                              (line 124)
* NC_BYTE:                               Hyperslabs.          (line  46)
* NC_CHAR <1>:                           ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* NC_CHAR <2>:                           ncbo netCDF Binary Operator.
                                                              (line 124)
* NC_CHAR:                               Hyperslabs.          (line  46)
* NC_DOUBLE <1>:                         ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* NC_DOUBLE:                             Intrinsic mathematical methods.
                                                              (line 141)
* NC_FLOAT:                              ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* NC_INT:                                ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* NC_INT64:                              netCDF2/3/4 and HDF4/5 Support.
                                                              (line  57)
* NC_SHORT:                              ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* NC_STRING:                             netCDF2/3/4 and HDF4/5 Support.
                                                              (line  66)
* NC_UBYTE:                              netCDF2/3/4 and HDF4/5 Support.
                                                              (line  57)
* NC_UINT:                               netCDF2/3/4 and HDF4/5 Support.
                                                              (line  57)
* NC_UINT64:                             netCDF2/3/4 and HDF4/5 Support.
                                                              (line  57)
* NC_USHORT:                             netCDF2/3/4 and HDF4/5 Support.
                                                              (line  57)
* ncadd:                                 ncbo netCDF Binary Operator.
                                                              (line   6)
* ncap <1>:                              ncap2 netCDF Arithmetic Processor.
                                                              (line   6)
* ncap:                                  OpenMP Threading.    (line  18)
* ncap2 <1>:                             ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  21)
* ncap2 <2>:                             ncap2 netCDF Arithmetic Processor.
                                                              (line   6)
* ncap2 <3>:                             Manual type conversion.
                                                              (line   6)
* ncap2 <4>:                             Memory for ncap2.    (line   6)
* ncap2:                                 Compatability.       (line  65)
* NCAR:                                  Climate Model Paradigm.
                                                              (line   6)
* NCAR MSS:                              Remote storage.      (line   6)
* ncatted <1>:                           ncatted netCDF Attribute Editor.
                                                              (line   6)
* ncatted <2>:                           History Attribute.   (line  24)
* ncatted <3>:                           Missing Values.      (line  33)
* ncatted:                               Subsetting Variables.
                                                              (line  33)
* ncbo <1>:                              ncbo netCDF Binary Operator.
                                                              (line   6)
* ncbo:                                  Missing Values.      (line  81)
* ncdiff:                                ncbo netCDF Binary Operator.
                                                              (line   6)
* ncdivide:                              ncbo netCDF Binary Operator.
                                                              (line   6)
* ncdump <1>:                            ncks netCDF Kitchen Sink.
                                                              (line 216)
* ncdump:                                Selecting Output File Format.
                                                              (line 104)
* ncea <1>:                              ncea netCDF Ensemble Averager.
                                                              (line   6)
* ncea <2>:                              Missing Values.      (line  81)
* ncea:                                  Averaging.           (line   6)
* ncecat <1>:                            ncecat netCDF Ensemble Concatenator.
                                                              (line   6)
* ncecat:                                Concatenation.       (line   6)
* ncextr:                                ncks netCDF Kitchen Sink.
                                                              (line  17)
* ncflint <1>:                           ncflint netCDF File Interpolator.
                                                              (line   6)
* ncflint <2>:                           Missing Values.      (line  81)
* ncflint:                               Interpolating.       (line   6)
* ncks <1>:                              ncks netCDF Kitchen Sink.
                                                              (line   6)
* ncks <2>:                              Examples ncap2.      (line 115)
* ncks <3>:                              Deflation.           (line  37)
* ncks:                                  Selecting Output File Format.
                                                              (line  88)
* NCL:                                   Philosophy.          (line  15)
* ncmult:                                ncbo netCDF Binary Operator.
                                                              (line   6)
* ncmultiply:                            ncbo netCDF Binary Operator.
                                                              (line   6)
* NCO availability:                      Availability.        (line   6)
* NCO homepage:                          Availability.        (line  30)
* nco.config.log.${GNU_TRP}.foo:         Help Requests and Bug Reports.
                                                              (line  69)
* nco.configure.${GNU_TRP}.foo:          Help Requests and Bug Reports.
                                                              (line  69)
* nco.make.${GNU_TRP}.foo:               Help Requests and Bug Reports.
                                                              (line  69)
* nco_input_file_list <1>:               File List Attributes.
                                                              (line   6)
* nco_input_file_list:                   Large Numbers of Files.
                                                              (line  34)
* nco_input_file_number <1>:             File List Attributes.
                                                              (line   6)
* nco_input_file_number:                 Large Numbers of Files.
                                                              (line  34)
* nco_openmp_thread_number:              OpenMP Threading.    (line   6)
* ncpack:                                ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* ncpdq <1>:                             ncrcat netCDF Record Concatenator.
                                                              (line  31)
* ncpdq <2>:                             ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* ncpdq <3>:                             ncecat netCDF Ensemble Concatenator.
                                                              (line  62)
* ncpdq <4>:                             Chunking.            (line  25)
* ncpdq <5>:                             OpenMP Threading.    (line  18)
* ncpdq:                                 Concatenation.       (line  39)
* ncra <1>:                              ncra netCDF Record Averager.
                                                              (line   6)
* ncra <2>:                              Examples ncap2.      (line 115)
* ncra <3>:                              Missing Values.      (line  81)
* ncra:                                  Averaging.           (line   6)
* ncrcat <1>:                            ncrcat netCDF Record Concatenator.
                                                              (line   6)
* ncrcat <2>:                            OpenMP Threading.    (line  18)
* ncrcat:                                Concatenation.       (line   6)
* ncrename <1>:                          ncrename netCDF Renamer.
                                                              (line   6)
* ncrename:                              Missing Values.      (line  33)
* NCSA:                                  netCDF2/3/4 and HDF4/5 Support.
                                                              (line  38)
* ncsub:                                 ncbo netCDF Binary Operator.
                                                              (line   6)
* ncsubtract:                            ncbo netCDF Binary Operator.
                                                              (line   6)
* ncunpack:                              ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* ncwa <1>:                              ncwa netCDF Weighted Averager.
                                                              (line   6)
* ncwa <2>:                              Examples ncap2.      (line 115)
* ncwa <3>:                              Missing Values.      (line  81)
* ncwa <4>:                              OpenMP Threading.    (line  18)
* ncwa:                                  Averaging.           (line   6)
* ndims():                               Methods and functions.
                                                              (line  83)
* NEARBYINT:                             Intrinsic mathematical methods.
                                                              (line  10)
* nearest integer function (exact):      Intrinsic mathematical methods.
                                                              (line  10)
* nearest integer function (inexact):    Intrinsic mathematical methods.
                                                              (line  10)
* NEC:                                   Compatability.       (line   6)
* nesting:                               Syntax of ncap2 statements.
                                                              (line  28)
* netCDF:                                Availability.        (line  34)
* netCDF2 <1>:                           Selecting Output File Format.
                                                              (line   6)
* netCDF2:                               netCDF2/3/4 and HDF4/5 Support.
                                                              (line   6)
* NETCDF2_ONLY:                          netCDF2/3/4 and HDF4/5 Support.
                                                              (line  23)
* netCDF3 <1>:                           Selecting Output File Format.
                                                              (line   6)
* netCDF3:                               netCDF2/3/4 and HDF4/5 Support.
                                                              (line   6)
* netCDF3 classic file format:           Selecting Output File Format.
                                                              (line  88)
* netCDF4 <1>:                           Selecting Output File Format.
                                                              (line   6)
* netCDF4:                               netCDF2/3/4 and HDF4/5 Support.
                                                              (line  38)
* netCDF4 classic file format:           Selecting Output File Format.
                                                              (line  88)
* netCDF4 file format:                   Selecting Output File Format.
                                                              (line  88)
* NETCDF4 files:                         Selecting Output File Format.
                                                              (line   6)
* NETCDF4_CLASSIC files:                 Selecting Output File Format.
                                                              (line   6)
* NETCDF4_ROOT:                          netCDF2/3/4 and HDF4/5 Support.
                                                              (line  88)
* NINTAP <1>:                            ncrcat netCDF Record Concatenator.
                                                              (line  50)
* NINTAP <2>:                            ncra netCDF Record Averager.
                                                              (line  42)
* NINTAP:                                Specifying Input Files.
                                                              (line   6)
* NO_NETCDF_2:                           netCDF2/3/4 and HDF4/5 Support.
                                                              (line  14)
* non-coordinate grid properties:        CF Conventions.      (line  36)
* non-rectangular grids:                 Irregular grids.     (line   6)
* non-standard grids:                    Irregular grids.     (line   6)
* normalization:                         Normalization and Integration.
                                                              (line   6)
* NRA:                                   Proposals for Institutional Funding.
                                                              (line  13)
* nrnet:                                 Remote storage.      (line  43)
* NSF:                                   Proposals for Institutional Funding.
                                                              (line   6)
* NT (Microsoft operating system):       Windows Operating System.
                                                              (line   6)
* NUL <1>:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 113)
* NUL:                                   ncatted netCDF Attribute Editor.
                                                              (line 209)
* NUL-termination:                       ncatted netCDF Attribute Editor.
                                                              (line 209)
* null operation:                        ncflint netCDF File Interpolator.
                                                              (line 123)
* number literals ncap:                  Number literals.     (line   6)
* numerator:                             Normalization and Integration.
                                                              (line   6)
* NVODS:                                 OPeNDAP.             (line  77)
* nxt_lsr:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  81)
* oceanography:                          OPeNDAP.             (line   6)
* octal dump:                            Selecting Output File Format.
                                                              (line 116)
* od:                                    Selecting Output File Format.
                                                              (line 116)
* OMP_NUM_THREADS:                       OpenMP Threading.    (line  18)
* on-line documentation:                 Availability.        (line  14)
* open source <1>:                       OPeNDAP.             (line  77)
* open source:                           Foreword.            (line  24)
* Open-source Project for a Network Data Access Protocol: OPeNDAP.
                                                              (line   6)
* OPeNDAP.:                              OPeNDAP.             (line   6)
* OpenMP <1>:                            OpenMP Threading.    (line   6)
* OpenMP <2>:                            Single and Multi-file Operators.
                                                              (line  48)
* OpenMP:                                Memory Requirements. (line  13)
* operation types <1>:                   ncwa netCDF Weighted Averager.
                                                              (line  79)
* operation types <2>:                   ncra netCDF Record Averager.
                                                              (line  35)
* operation types <3>:                   ncea netCDF Ensemble Averager.
                                                              (line  32)
* operation types:                       Operation Types.     (line   6)
* operator speed <1>:                    ncrename netCDF Renamer.
                                                              (line  42)
* operator speed <2>:                    Missing Values.      (line  64)
* operator speed <3>:                    Metadata Optimization.
                                                              (line   6)
* operator speed <4>:                    Performance.         (line  22)
* operator speed <5>:                    Temporary Output Files.
                                                              (line  19)
* operator speed:                        Libraries.           (line   7)
* operators:                             Summary.             (line   6)
* OptIPuter:                             Proposals for Institutional Funding.
                                                              (line   6)
* Orion Powlawski:                       Contributors.        (line  65)
* ORO <1>:                               Normalization and Integration.
                                                              (line  82)
* ORO:                                   CF Conventions.      (line   6)
* OS:                                    Compatability.       (line   6)
* output file <1>:                       Specifying Output Files.
                                                              (line   6)
* output file:                           Large Numbers of Files.
                                                              (line  60)
* OUTPUT-PATH:                           Remote storage.      (line  68)
* overview:                              Performance.         (line   6)
* overwriting files <1>:                 Batch Mode.          (line   6)
* overwriting files:                     Temporary Output Files.
                                                              (line  25)
* pack():                                Methods and functions.
                                                              (line  60)
* pack(x):                               Packed data.         (line   6)
* pack_byte():                           Methods and functions.
                                                              (line  64)
* pack_int():                            Methods and functions.
                                                              (line  70)
* pack_short():                          Methods and functions.
                                                              (line  67)
* packing <1>:                           ncrcat netCDF Record Concatenator.
                                                              (line  31)
* packing <2>:                           ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* packing <3>:                           ncecat netCDF Ensemble Concatenator.
                                                              (line  62)
* packing <4>:                           Packed data.         (line   6)
* packing <5>:                           Chunking.            (line  25)
* packing:                               OPeNDAP.             (line  59)
* packing map:                           ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  75)
* packing policy:                        ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  21)
* papers:                                Performance.         (line   6)
* parallelism <1>:                       Proposals for Institutional Funding.
                                                              (line   8)
* parallelism:                           OpenMP Threading.    (line   6)
* parser:                                ncap2 netCDF Arithmetic Processor.
                                                              (line   6)
* pasting variables:                     Appending Variables. (line   6)
* pathCC:                                Compatability.       (line  22)
* pathcc:                                Compatability.       (line  22)
* PathScale:                             Compatability.       (line   6)
* Patrice Dumas:                         Contributors.        (line  65)
* Patrick Kursawe:                       Contributors.        (line  68)
* pattern matching <1>:                  ncatted netCDF Attribute Editor.
                                                              (line  49)
* pattern matching <2>:                  Subsetting Variables.
                                                              (line  33)
* pattern matching:                      Large Numbers of Files.
                                                              (line  42)
* PayPal:                                Contributing.        (line  10)
* PCK_MAP:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  75)
* PCK_PLC:                               ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  28)
* peak memory usage:                     Memory Requirements. (line   6)
* performance <1>:                       ncrename netCDF Renamer.
                                                              (line  42)
* performance <2>:                       Missing Values.      (line  64)
* performance <3>:                       Metadata Optimization.
                                                              (line   6)
* performance <4>:                       Performance.         (line  12)
* performance <5>:                       Temporary Output Files.
                                                              (line  19)
* performance:                           Libraries.           (line   7)
* Perl <1>:                              ncatted netCDF Attribute Editor.
                                                              (line 183)
* Perl <2>:                              Large Numbers of Files.
                                                              (line  74)
* Perl:                                  Philosophy.          (line  15)
* permute dimensions:                    ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* permute():                             Arrays and hyperslabs.
                                                              (line 109)
* pgCC:                                  Compatability.       (line  22)
* pgcc:                                  Compatability.       (line  22)
* PGI:                                   Compatability.       (line   6)
* philosophy:                            Philosophy.          (line   6)
* pipes:                                 Large Numbers of Files.
                                                              (line  55)
* plc_all:                               Chunking.            (line  36)
* plc_g2d:                               Chunking.            (line  36)
* plc_g3d:                               Chunking.            (line  36)
* plc_xpl:                               Chunking.            (line  36)
* portability:                           Compatability.       (line   6)
* positional arguments:                  Specifying Output Files.
                                                              (line   6)
* POSIX <1>:                             Subsetting Variables.
                                                              (line  45)
* POSIX:                                 Command Line Options.
                                                              (line   7)
* POW:                                   Intrinsic mathematical methods.
                                                              (line  10)
* power:                                 Intrinsic mathematical methods.
                                                              (line   7)
* power function:                        Intrinsic mathematical methods.
                                                              (line  10)
* prd:                                   Chunking.            (line  74)
* precision:                             Intrinsic mathematical methods.
                                                              (line 141)
* preprocessor tokens:                   Windows Operating System.
                                                              (line  11)
* presentations:                         Availability.        (line  24)
* print()ncap:                           print statement.     (line   6)
* printf:                                Compatability.       (line  35)
* printf() <1>:                          ncks netCDF Kitchen Sink.
                                                              (line 245)
* printf():                              ncatted netCDF Attribute Editor.
                                                              (line 185)
* printing files contents:               ncks netCDF Kitchen Sink.
                                                              (line   6)
* printing variables:                    ncks netCDF Kitchen Sink.
                                                              (line   6)
* Processor <1>:                         ncrcat netCDF Record Concatenator.
                                                              (line  50)
* Processor:                             ncra netCDF Record Averager.
                                                              (line  42)
* Processor, CCM:                        Specifying Input Files.
                                                              (line   6)
* promotion <1>:                         Intrinsic mathematical methods.
                                                              (line 100)
* promotion:                             Type Conversion.     (line   8)
* proposals:                             Proposals for Institutional Funding.
                                                              (line   6)
* publications:                          Availability.        (line  24)
* QLogic:                                Compatability.       (line   6)
* quadruple precision:                   Intrinsic mathematical methods.
                                                              (line 141)
* quiet:                                 ncks netCDF Kitchen Sink.
                                                              (line 237)
* quotes <1>:                            ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 208)
* quotes <2>:                            ncbo netCDF Binary Operator.
                                                              (line  51)
* quotes <3>:                            Examples ncap2.      (line  92)
* quotes:                                Subsetting Variables.
                                                              (line 102)
* RAM:                                   Memory Requirements. (line   6)
* ram_delete():                          RAM variables.       (line  10)
* ram_write():                           RAM variables.       (line  10)
* rank <1>:                              ncwa netCDF Weighted Averager.
                                                              (line  43)
* rank:                                  ncbo netCDF Binary Operator.
                                                              (line 105)
* rcp <1>:                               Remote storage.      (line   6)
* rcp:                                   Windows Operating System.
                                                              (line  17)
* RCS:                                   Operator Version.    (line   6)
* rd1:                                   Chunking.            (line  74)
* re-dimension:                          ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* re-order dimensions:                   ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* record average:                        ncra netCDF Record Averager.
                                                              (line   6)
* record concatenation:                  ncrcat netCDF Record Concatenator.
                                                              (line   6)
* record dimension <1>:                  ncrcat netCDF Record Concatenator.
                                                              (line  16)
* record dimension <2>:                  ncra netCDF Record Averager.
                                                              (line   6)
* record dimension <3>:                  ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 141)
* record dimension <4>:                  ncks netCDF Kitchen Sink.
                                                              (line 128)
* record dimension <5>:                  ncecat netCDF Ensemble Concatenator.
                                                              (line  23)
* record dimension <6>:                  ncea netCDF Ensemble Averager.
                                                              (line  23)
* record dimension <7>:                  C and Fortran Index Conventions.
                                                              (line  22)
* record dimension:                      Appending Variables. (line   9)
* record variable <1>:                   ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 145)
* record variable:                       C and Fortran Index Conventions.
                                                              (line  17)
* rectangular grids:                     Irregular grids.     (line   6)
* regex:                                 Subsetting Variables.
                                                              (line  45)
* regressions archive:                   Help Requests and Bug Reports.
                                                              (line  76)
* regular expressions <1>:               ncatted netCDF Attribute Editor.
                                                              (line  49)
* regular expressions <2>:               Examples ncap2.      (line  92)
* regular expressions <3>:               Subsetting Variables.
                                                              (line  33)
* regular expressions <4>:               Specifying Input Files.
                                                              (line   6)
* regular expressions:                   Large Numbers of Files.
                                                              (line  42)
* Remik Ziemlinski:                      Contributors.        (line  56)
* remote files <1>:                      Remote storage.      (line   6)
* remote files:                          Windows Operating System.
                                                              (line  17)
* renaming attributes:                   ncrename netCDF Renamer.
                                                              (line   6)
* renaming dimensions:                   ncrename netCDF Renamer.
                                                              (line   6)
* renaming variables:                    ncrename netCDF Renamer.
                                                              (line   6)
* reporting bugs:                        Help Requests and Bug Reports.
                                                              (line   6)
* reshape variables:                     ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* restrict:                              Compatability.       (line  58)
* reverse data:                          ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 238)
* reverse dimensions:                    ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* reverse():                             Arrays and hyperslabs.
                                                              (line 102)
* RINT:                                  Intrinsic mathematical methods.
                                                              (line  10)
* rms:                                   Operation Types.     (line   6)
* rmssdn:                                Operation Types.     (line   6)
* rmssdn():                              Methods and functions.
                                                              (line  47)
* root-mean-square:                      Operation Types.     (line   6)
* Rorik Peterson:                        Contributors.        (line  19)
* ROUND:                                 Intrinsic mathematical methods.
                                                              (line  10)
* rounding functions:                    Intrinsic mathematical methods.
                                                              (line  10)
* RPM:                                   netCDF2/3/4 and HDF4/5 Support.
                                                              (line  83)
* running average:                       ncra netCDF Record Averager.
                                                              (line   6)
* safeguards <1>:                        ncrename netCDF Renamer.
                                                              (line  27)
* safeguards:                            Temporary Output Files.
                                                              (line   6)
* scale_factor <1>:                      ncrcat netCDF Record Concatenator.
                                                              (line  31)
* scale_factor <2>:                      ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  21)
* scale_factor <3>:                      ncecat netCDF Ensemble Concatenator.
                                                              (line  62)
* scale_factor:                          Packed data.         (line   6)
* SCALE_FORMAT:                          Performance.         (line  31)
* scaling:                               Performance.         (line  12)
* Scientific Data Operators:             Proposals for Institutional Funding.
                                                              (line   6)
* scl:                                   Chunking.            (line  74)
* Scott Capps:                           Contributors.        (line  53)
* scp <1>:                               Remote storage.      (line   6)
* scp:                                   Windows Operating System.
                                                              (line  17)
* script file:                           ncap2 netCDF Arithmetic Processor.
                                                              (line  23)
* SDO:                                   Proposals for Institutional Funding.
                                                              (line   6)
* SEIII:                                 Proposals for Institutional Funding.
                                                              (line   6)
* semi-colon:                            Syntax of ncap2 statements.
                                                              (line  21)
* server <1>:                            Retaining Retrieved Files.
                                                              (line  27)
* server <2>:                            OPeNDAP.             (line   6)
* server:                                Large Datasets.      (line  23)
* Server-Side Distributed Data Reduction & Analysis: Proposals for Institutional Funding.
                                                              (line   6)
* server-side processing <1>:            Proposals for Institutional Funding.
                                                              (line   6)
* server-side processing:                OPeNDAP.             (line 100)
* set_miss():                            Missing values ncap2.
                                                              (line  37)
* sftp <1>:                              Remote storage.      (line   6)
* sftp:                                  Windows Operating System.
                                                              (line  17)
* SGI:                                   Compatability.       (line   6)
* shared memory machines:                Memory Requirements. (line  13)
* shared memory parallelism:             OpenMP Threading.    (line   6)
* shell <1>:                             ncbo netCDF Binary Operator.
                                                              (line  51)
* shell <2>:                             Examples ncap2.      (line  92)
* shell <3>:                             UDUnits Support.     (line  76)
* shell <4>:                             Subsetting Variables.
                                                              (line 102)
* shell:                                 Large Numbers of Files.
                                                              (line  42)
* SIGNEDNESS:                            Performance.         (line  31)
* SIN:                                   Intrinsic mathematical methods.
                                                              (line  10)
* sine function:                         Intrinsic mathematical methods.
                                                              (line  10)
* single precision:                      Intrinsic mathematical methods.
                                                              (line 141)
* SINH:                                  Intrinsic mathematical methods.
                                                              (line  10)
* size():                                Methods and functions.
                                                              (line  80)
* SMP:                                   OpenMP Threading.    (line   6)
* sort alphabetically:                   ncks netCDF Kitchen Sink.
                                                              (line 102)
* source code:                           Availability.        (line   6)
* special characters:                    ncatted netCDF Attribute Editor.
                                                              (line 200)
* speed <1>:                             ncrename netCDF Renamer.
                                                              (line  42)
* speed <2>:                             Missing Values.      (line  64)
* speed <3>:                             Metadata Optimization.
                                                              (line   6)
* speed <4>:                             Performance.         (line  22)
* speed <5>:                             Large Datasets.      (line  32)
* speed <6>:                             Temporary Output Files.
                                                              (line  19)
* speed:                                 Libraries.           (line   7)
* sqravg:                                Operation Types.     (line   6)
* sqravg():                              Methods and functions.
                                                              (line  32)
* SQRT:                                  Intrinsic mathematical methods.
                                                              (line  10)
* sqrt:                                  Operation Types.     (line   6)
* square root function:                  Intrinsic mathematical methods.
                                                              (line  10)
* SSDDRA:                                Proposals for Institutional Funding.
                                                              (line   6)
* SSH <1>:                               Retaining Retrieved Files.
                                                              (line  24)
* SSH:                                   Windows Operating System.
                                                              (line  17)
* sshort():                              Methods and functions.
                                                              (line 148)
* standard deviation:                    Operation Types.     (line   6)
* standard input <1>:                    ncrcat netCDF Record Concatenator.
                                                              (line  19)
* standard input <2>:                    ncra netCDF Record Averager.
                                                              (line  19)
* standard input <3>:                    ncecat netCDF Ensemble Concatenator.
                                                              (line  37)
* standard input <4>:                    ncea netCDF Ensemble Averager.
                                                              (line  38)
* standard input:                        Large Numbers of Files.
                                                              (line  25)
* standard_name:                         Auxiliary Coordinates.
                                                              (line   6)
* statement:                             Syntax of ncap2 statements.
                                                              (line   6)
* static linking:                        Libraries.           (line   6)
* stdin <1>:                             ncrcat netCDF Record Concatenator.
                                                              (line  19)
* stdin <2>:                             ncra netCDF Record Averager.
                                                              (line  19)
* stdin <3>:                             ncecat netCDF Ensemble Concatenator.
                                                              (line  37)
* stdin <4>:                             ncea netCDF Ensemble Averager.
                                                              (line  38)
* stdin <5>:                             File List Attributes.
                                                              (line   6)
* stdin:                                 Large Numbers of Files.
                                                              (line  25)
* stride <1>:                            ncrcat netCDF Record Concatenator.
                                                              (line  27)
* stride <2>:                            ncra netCDF Record Averager.
                                                              (line  27)
* stride <3>:                            ncks netCDF Kitchen Sink.
                                                              (line 124)
* stride <4>:                            UDUnits Support.     (line  67)
* stride <5>:                            Multislabs.          (line  36)
* stride <6>:                            Stride.              (line   6)
* stride:                                Hyperslabs.          (line  35)
* strings:                               ncatted netCDF Attribute Editor.
                                                              (line 209)
* stub:                                  Remote storage.      (line  77)
* subsetting <1>:                        ncks netCDF Kitchen Sink.
                                                              (line 271)
* subsetting <2>:                        CF Conventions.      (line  57)
* subsetting <3>:                        Subsetting Coordinate Variables.
                                                              (line   6)
* subsetting:                            Subsetting Variables.
                                                              (line   6)
* subtract:                              ncbo netCDF Binary Operator.
                                                              (line  21)
* subtracting data:                      ncbo netCDF Binary Operator.
                                                              (line   6)
* subtraction <1>:                       ncbo netCDF Binary Operator.
                                                              (line   6)
* subtraction:                           Intrinsic mathematical methods.
                                                              (line   7)
* summary:                               Summary.             (line   6)
* Sun:                                   Compatability.       (line   6)
* swap space <1>:                        Memory Requirements. (line   6)
* swap space:                            Large Datasets.      (line  11)
* switches:                              Command Line Options.
                                                              (line   7)
* symbolic links <1>:                    ncpdq netCDF Permute Dimensions Quickly.
                                                              (line  69)
* symbolic links <2>:                    ncbo netCDF Binary Operator.
                                                              (line  65)
* symbolic links <3>:                    Large Numbers of Files.
                                                              (line  68)
* symbolic links:                        Averaging vs. Concatenating.
                                                              (line   6)
* synchronous file access:               Remote storage.      (line   6)
* syntax:                                Syntax of ncap2 statements.
                                                              (line   6)
* Takeshi Enomoto:                       Contributors.        (line  74)
* TAN:                                   Intrinsic mathematical methods.
                                                              (line  10)
* TANH:                                  Intrinsic mathematical methods.
                                                              (line  10)
* temporary output files <1>:            ncrename netCDF Renamer.
                                                              (line  27)
* temporary output files:                Temporary Output Files.
                                                              (line   6)
* TeXinfo:                               Availability.        (line  14)
* THR_NBR:                               OpenMP Threading.    (line  18)
* threads <1>:                           OpenMP Threading.    (line   6)
* threads <2>:                           Single and Multi-file Operators.
                                                              (line  48)
* threads:                               Memory Requirements. (line  13)
* time <1>:                              ARM Conventions.     (line   6)
* time:                                  UDUnits Support.     (line  59)
* time-averaging:                        Examples ncap2.      (line 115)
* time_offset:                           ARM Conventions.     (line   6)
* timestamp:                             History Attribute.   (line   6)
* total:                                 Operation Types.     (line   6)
* transpose <1>:                         ncpdq netCDF Permute Dimensions Quickly.
                                                              (line 155)
* transpose:                             C and Fortran Index Conventions.
                                                              (line  15)
* TRUNC:                                 Intrinsic mathematical methods.
                                                              (line  10)
* truncation function:                   Intrinsic mathematical methods.
                                                              (line  10)
* truth condition <1>:                   Normalization and Integration.
                                                              (line 115)
* truth condition:                       Mask condition.      (line   6)
* ttl:                                   Operation Types.     (line   6)
* ttl():                                 Methods and functions.
                                                              (line  50)
* type conversion:                       Type Conversion.     (line   6)
* type():                                Methods and functions.
                                                              (line  86)
* ubyte():                               Methods and functions.
                                                              (line 165)
* UDUnits <1>:                           CF Conventions.      (line   6)
* UDUnits <2>:                           UDUnits Support.     (line   6)
* UDUnits:                               Compatability.       (line  14)
* uint():                                Methods and functions.
                                                              (line 171)
* ulimit:                                Large Datasets.      (line  27)
* unary operations:                      Memory for ncap2.    (line   6)
* UNICOS:                                Large Datasets.      (line  23)
* Unidata <1>:                           UDUnits Support.     (line   6)
* Unidata <2>:                           netCDF2/3/4 and HDF4/5 Support.
                                                              (line  38)
* Unidata:                               Compatability.       (line  14)
* union of two files:                    Appending Variables. (line  29)
* unit64():                              Methods and functions.
                                                              (line 177)
* units <1>:                             ncflint netCDF File Interpolator.
                                                              (line 138)
* units <2>:                             ncatted netCDF Attribute Editor.
                                                              (line 240)
* units:                                 UDUnits Support.     (line   6)
* UNIX <1>:                              Specifying Input Files.
                                                              (line  12)
* UNIX <2>:                              Command Line Options.
                                                              (line   7)
* UNIX <3>:                              Large Numbers of Files.
                                                              (line  42)
* UNIX <4>:                              Windows Operating System.
                                                              (line  15)
* UNIX:                                  Compatability.       (line  14)
* unlimited dimension:                   ncecat netCDF Ensemble Concatenator.
                                                              (line  23)
* unpack():                              Methods and functions.
                                                              (line  73)
* unpack(x):                             Packed data.         (line   6)
* unpacking <1>:                         ncrcat netCDF Record Concatenator.
                                                              (line  31)
* unpacking <2>:                         ncpdq netCDF Permute Dimensions Quickly.
                                                              (line   6)
* unpacking <3>:                         ncecat netCDF Ensemble Concatenator.
                                                              (line  62)
* unpacking <4>:                         Packed data.         (line   6)
* unpacking:                             OPeNDAP.             (line  59)
* URL:                                   Remote storage.      (line   6)
* ushort():                              Methods and functions.
                                                              (line 168)
* value list:                            Attributes.          (line  19)
* variable names:                        ncrename netCDF Renamer.
                                                              (line   6)
* variance:                              Operation Types.     (line   6)
* version:                               Operator Version.    (line   6)
* weighted average:                      ncwa netCDF Weighted Averager.
                                                              (line   6)
* where():                               Where statement.     (line   6)
* while():                               Loops.               (line   6)
* whitespace:                            UDUnits Support.     (line  67)
* wildcards <1>:                         ncatted netCDF Attribute Editor.
                                                              (line  49)
* wildcards <2>:                         Subsetting Variables.
                                                              (line  33)
* wildcards:                             Specifying Input Files.
                                                              (line   6)
* WIN32:                                 Windows Operating System.
                                                              (line  11)
* Windows <1>:                           Windows Operating System.
                                                              (line   6)
* Windows:                               Compatability.       (line   6)
* wrapped coordinates <1>:               ncks netCDF Kitchen Sink.
                                                              (line 344)
* wrapped coordinates <2>:               Irregular grids.     (line  33)
* wrapped coordinates <3>:               Wrapped Coordinates. (line   6)
* wrapped coordinates:                   Hyperslabs.          (line  51)
* wrapped filenames:                     Specifying Input Files.
                                                              (line  65)
* WWW documentation:                     Availability.        (line  14)
* xargs <1>:                             Specifying Output Files.
                                                              (line  23)
* xargs:                                 Large Numbers of Files.
                                                              (line  42)
* xlc:                                   Compatability.       (line  22)
* xlC:                                   Compatability.       (line  22)
* XP (Microsoft operating system):       Windows Operating System.
                                                              (line   6)
* xpl:                                   Chunking.            (line  36)
* Yorick <1>:                            Performance.         (line  34)
* Yorick:                                Philosophy.          (line  15)
* | (wildcard character):                Subsetting Variables.
                                                              (line  59)


